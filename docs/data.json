[[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{*} value element to add at the end of array","name":"value","description":"<p>element to add at the end of array</p>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} data array to add element to","name":"data","description":"<p>array to add element to</p>","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Array} new array folowed by provided value","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>new array folowed by provided value</p>"},{"type":"see","string":"prepend, concat","local":"prepend, concat","html":"<p>prepend, concat</p>"},{"type":"example","string":"N.append('nier', ['hello']); // -> ['hello', 'nier']\nN.append('nier')(['who loves you?']); // ['who loves you?', 'nier']\nN.append(['nier'], ['hello']); // ['hello', ['nier']]","html":"<p>N.append('nier', ['hello']); // -&gt; ['hello', 'nier']<br />\nN.append('nier')(['who loves you?']); // ['who loves you?', 'nier']<br />\nN.append(['nier'], ['hello']); // ['hello', ['nier']]</p>"}],"description":{"full":"<p>Creates new array containing the contents of the given array or array like structure,<br />\nfolowed by the given value. Note that append will create only a shallow copy of provided<br />\ndata structure.</p>","summary":"<p>Creates new array containing the contents of the given array or array like structure,<br />\nfolowed by the given value. Note that append will create only a shallow copy of provided<br />\ndata structure.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":6,"codeStart":25,"code":"function append(value, data) {\n  if (!isArrayLike(data)) {\n    throw new Error('N.append received data that is not array or array like structure');\n  }\n\n  const result = cloneArrayLike(data);\n  result[data.length] = value;\n\n  return result;\n}\n\nmodule.exports = curry(append);","ctx":{"type":"function","name":"append","string":"append()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Function","html":"<p>Function</p>"},{"type":"param","string":"{Function} fn function to call","name":"fn","description":"<p>function to call</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{...*} args list of arguments to call function with","name":"args","description":"<p>list of arguments to call function with</p>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true},{"type":"return","string":"{*} result of calling function with given list of arguments","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>result of calling function with given list of arguments</p>"},{"type":"example","string":"N.call(console.log, 'hello', 'nier'); // -> same as console.log('hello', 'nier')\nN.call(N.clamp(1, 10), 15); // -> same as N.clamp(1, 10, 15)\nN.call(N.has('nier'), { nier: 'hello' }); // -> same as N.has('nier', { nier: 'hello' })","html":"<p>N.call(console.log, 'hello', 'nier'); // -&gt; same as console.log('hello', 'nier')<br />\nN.call(N.clamp(1, 10), 15); // -&gt; same as N.clamp(1, 10, 15)<br />\nN.call(N.has('nier'), { nier: 'hello' }); // -&gt; same as N.has('nier', { nier: 'hello' })</p>"}],"description":{"full":"<p>Calls provided function (first argument) with given values (all other arguments).</p>","summary":"<p>Calls provided function (first argument) with given values (all other arguments).</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":19,"code":"function call(fn, ...args) {\n  if (typeof fn !== 'function') {\n    throw new Error('N.call received first argument which type is not function');\n  }\n\n  return fn(...args);\n}\n\nmodule.exports = curryN(2, call);","ctx":{"type":"function","name":"call","string":"call()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{number} size size of each chunk","name":"size","description":"<p>size of each chunk</p>","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} value value to process","name":"value","description":"<p>value to process</p>","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Array} array of chunks","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>array of chunks</p>"},{"type":"example","string":"N.chunk([1, 2, 3, 4, 5], 2); // -> [[1, 2], [3, 4], [5]]\nN.chunk([1, 2], 3); // -> [[1, 2]]\nN.chunk([], 2); // -> []","html":"<p>N.chunk([1, 2, 3, 4, 5], 2); // -&gt; [[1, 2], [3, 4], [5]]<br />\nN.chunk([1, 2], 3); // -&gt; [[1, 2]]<br />\nN.chunk([], 2); // -&gt; []</p>"}],"description":{"full":"<p>Creates an array of elements split into groups with provided length value.<br />\nIf array can't be split evenly, the final chunk will contain the remaining elements.</p>","summary":"<p>Creates an array of elements split into groups with provided length value.<br />\nIf array can't be split evenly, the final chunk will contain the remaining elements.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":7,"codeStart":23,"code":"function chunk(size, value) {\n  if (!isArrayLike(value)) {\n    throw new Error('N.chunk in not able to split values that are not array or array like');\n  }\n\n  const parsedSize = toInteger(size);\n  const safeClone = cloneArrayLike(value);\n  const result = [];\n\n  for (let i = 0, l = safeClone.length; i < l; i += parsedSize) {\n    result.push(safeClone.slice(i, i + size));\n  }\n\n  return result;\n}\n\nmodule.exports = curry(chunk);","ctx":{"type":"function","name":"chunk","string":"chunk()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Number","html":"<p>Number</p>"},{"type":"param","string":"{number} min lower border","name":"min","description":"<p>lower border</p>","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{number} max upper border","name":"max","description":"<p>upper border</p>","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{number} value number to clamp","name":"value","description":"<p>number to clamp</p>","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{number} clamped number","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>clamped number</p>"},{"type":"example","string":"N.clamp(10, 20, 100); // -> 20\nN.clamp(-10, 20, -50); // -> -10\nN.clamp(1.5, 1.9, 1.937); // -> 1.9","html":"<p>N.clamp(10, 20, 100); // -&gt; 20<br />\nN.clamp(-10, 20, -50); // -&gt; -10<br />\nN.clamp(1.5, 1.9, 1.937); // -&gt; 1.9</p>"}],"description":{"full":"<p>Clamps number within provided min and max borders</p>","summary":"<p>Clamps number within provided min and max borders</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":20,"code":"function clamp(min, max, value) {\n  if (min > max) {\n    throw new Error('min must not be greater than max in clamp');\n  }\n\n  return Math.max(Math.min(value, max), min);\n}\n\nmodule.exports = curry(clamp);","ctx":{"type":"function","name":"clamp","string":"clamp()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Function","html":"<p>Function</p>"},{"type":"param","string":"{Function} fn function to negate","name":"fn","description":"<p>function to negate</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{boolean} negated result of calling fn","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>negated result of calling fn</p>"},{"type":"example","string":"N.negate(() => true)(); // -> false\nN.negate(() => false)(); // -> true\nconst notString = N.complement(N.is(String));\nnotString('nier'); // -> false\nnotString(1000); // -> true","html":"<p>N.negate(() =&gt; true)(); // -&gt; false<br />\nN.negate(() =&gt; false)(); // -&gt; true<br />\nconst notString = N.complement(N.is(String));<br />\nnotString('nier'); // -&gt; false<br />\nnotString(1000); // -&gt; true</p>"}],"description":{"full":"<p>Creates new function that returns the negated value of provided function</p>","summary":"<p>Creates new function that returns the negated value of provided function</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":20,"code":"function complement(fn) {\n  if (typeof fn !== 'function') {\n    throw new Error('complement received argument that is not function');\n  }\n\n  return (...args) => !fn(...args);\n}\n\nmodule.exports = curry(complement);","ctx":{"type":"function","name":"complement","string":"complement()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Function","html":"<p>Function</p>"},{"type":"param","string":"{...Function} fns functions to compose","name":"fns","description":"<p>functions to compose</p>","types":["Function"],"typesDescription":"...<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true},{"type":"return","string":"{Function} composed function","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>composed function</p>"},{"type":"example","string":"N.compose(val => val + 1, val => val * 2)(1); // -> 1 * 2 -> 2 + 1 -> 3\nN.compose(N.trim, N.upperFirst)('  hello!'); // N.trim('  hello!') -> N.upperFirst('hello!') -> 'Hello!'","html":"<p>N.compose(val =&gt; val + 1, val =&gt; val * 2)(1); // -&gt; 1 * 2 -&gt; 2 + 1 -&gt; 3<br />\nN.compose(N.trim, N.upperFirst)('  hello!'); // N.trim('  hello!') -&gt; N.upperFirst('hello!') -&gt; 'Hello!'</p>"}],"description":{"full":"<p>Performs last-to-first function composition. The last function may have any arity, the remaining functions must be unary.</p>","summary":"<p>Performs last-to-first function composition. The last function may have any arity, the remaining functions must be unary.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":5,"codeStart":18,"code":"module.exports = function compose(...fns) {\n  if (fns.length === 0) {\n    throw new Error('N.compose requires at least one function argument');\n  }\n\n  return pipe(...reverse(fns));\n};","ctx":{"type":"method","receiver":"module","name":"exports","string":"module.exports()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Array|string} a fitst value to concat","name":"a","description":"<p>fitst value to concat</p>","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array|string} b second value to concat","name":"b","description":"<p>second value to concat</p>","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Array|string} result of concatination","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>result of concatination</p>"},{"type":"example","string":"N.concat([1, 2, 3], [4, 5]); // -> [1, 2, 3, 4, 5]\nN.concat('Hello, ', 'nier!'); // -> 'Hello, nier!'","html":"<p>N.concat([1, 2, 3], [4, 5]); // -&gt; [1, 2, 3, 4, 5]<br />\nN.concat('Hello, ', 'nier!'); // -&gt; 'Hello, nier!'</p>"}],"description":{"full":"<p>Concatenates two array or string values into one</p>","summary":"<p>Concatenates two array or string values into one</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":6,"codeStart":20,"code":"function concat(a, b) {\n  if (!isArrayLike(a) || !isArrayLike(b)) {\n    throw new Error('N.concat received values that can not be concated');\n  }\n\n  const aClone = cloneArrayLike(a);\n  const bClone = cloneArrayLike(b);\n  const concated = aClone.concat(bClone);\n\n  return typeof a === 'string' && typeof b === 'string' ? concated.join('') : concated;\n}\n\nmodule.exports = curry(concat);","ctx":{"type":"function","name":"concat","string":"concat()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Function","html":"<p>Function</p>"},{"type":"param","string":"{Function} fn function to curry","name":"fn","description":"<p>function to curry</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Function} curried function","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>curried function</p>"},{"type":"see","string":"curryN","local":"curryN","html":"<p>curryN</p>"},{"type":"example","string":"const sum = N.curry((a, b, c) => a + b + c);\nsum(1, 2, 3); // 6\nsum(1, 2)(3); // 6\nsum(1)(2)(3); // 6\nsum(1)()(2)()(3); // 6","html":"<p>const sum = N.curry((a, b, c) =&gt; a + b + c);<br />\nsum(1, 2, 3); // 6<br />\nsum(1, 2)(3); // 6<br />\nsum(1)(2)(3); // 6<br />\nsum(1)()(2)()(3); // 6</p>"}],"description":{"full":"<p>Returns curried equivalent of provided function.</p>","summary":"<p>Returns curried equivalent of provided function.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":22,"code":"function curry(fn) {\n  return curryN(fn.length, fn);\n}\n\nmodule.exports = curryN(1, curry);","ctx":{"type":"function","name":"curry","string":"curry()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Function","html":"<p>Function</p>"},{"type":"param","string":"{Function} fn function to curry","name":"fn","description":"<p>function to curry</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Function} curried function","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>curried function</p>"},{"type":"see","string":"curry","local":"curry","html":"<p>curry</p>"},{"type":"example","string":"const sum = N.curryN(3, (...args) => args[0] + args[1] + args[2]);\nsum(1, 2, 3); // 6\nsum(1, 2)(3); // 6\nsum(1)(2)(3); // 6\nsum(1)()(2)()(3); // 6","html":"<p>const sum = N.curryN(3, (...args) =&gt; args[0] + args[1] + args[2]);<br />\nsum(1, 2, 3); // 6<br />\nsum(1, 2)(3); // 6<br />\nsum(1)(2)(3); // 6<br />\nsum(1)()(2)()(3); // 6</p>"}],"description":{"full":"<p>Returns curried equivalent of provided function, with the specified arity.</p>","summary":"<p>Returns curried equivalent of provided function, with the specified arity.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":22,"code":"function curryN(length, fn) {\n  return CurryN(length, [], fn);\n}\n\nmodule.exports = CurryN(2, [], curryN);","ctx":{"type":"function","name":"curryN","string":"curryN()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Language","html":"<p>Language</p>"},{"type":"param","string":"{*} a","name":"a","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} a</p>"},{"type":"param","string":"{*} b","name":"b","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} b</p>"},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"},{"type":"example","string":"N.equals(1, 1); // -> true\nN.equals('hello', 'hello!'); // -> false\nN.equals(true, true); // -> true\nN.equals(null, undefined); // -> false\nN.equals({ a: 1 }, { a: 1 }); // -> true\nN.equals({ a: { b: 1 } }, { a: { b: 1 } }); // -> true\nN.equals({ a: { b: 1 } }, { a: { b: 2 } }); // -> false\nN.equals({ a: [1, 2, 3] }, { a: [1, 2, 3] }); // -> true\nN.equals({ a: [1, 2, 3] }, { a: [1, 2, 3, 4] }); // -> false\nN.equals([1, 2, 3], [1, 2, 3]); // -> true\nN.equals([1, 2, 3], [1, 2, 3, 4]); // -> false\nN.equals([{ id: 1 }, { id: 2 }], [{ id: 1 }, { id: 2 }]); // -> true\nN.equals([{ id: 1 }, { id: 2 }], [{ id: 1 }, { id: 3 }]); // -> false","html":"<p>N.equals(1, 1); // -&gt; true<br />\nN.equals('hello', 'hello!'); // -&gt; false<br />\nN.equals(true, true); // -&gt; true<br />\nN.equals(null, undefined); // -&gt; false<br />\nN.equals({ a: 1 }, { a: 1 }); // -&gt; true<br />\nN.equals({ a: { b: 1 } }, { a: { b: 1 } }); // -&gt; true<br />\nN.equals({ a: { b: 1 } }, { a: { b: 2 } }); // -&gt; false<br />\nN.equals({ a: [1, 2, 3] }, { a: [1, 2, 3] }); // -&gt; true<br />\nN.equals({ a: [1, 2, 3] }, { a: [1, 2, 3, 4] }); // -&gt; false<br />\nN.equals([1, 2, 3], [1, 2, 3]); // -&gt; true<br />\nN.equals([1, 2, 3], [1, 2, 3, 4]); // -&gt; false<br />\nN.equals([{ id: 1 }, { id: 2 }], [{ id: 1 }, { id: 2 }]); // -&gt; true<br />\nN.equals([{ id: 1 }, { id: 2 }], [{ id: 1 }, { id: 3 }]); // -&gt; false</p>"}],"description":{"full":"<p>Returns true if two passed values are equal.</p>","summary":"<p>Returns true if two passed values are equal.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":6,"codeStart":31,"code":"function equals(a, b) {\n  const aType = type(a);\n  const bType = type(b);\n\n  if (aType !== bType) {\n    return false;\n  }\n\n  switch (aType) {\n    case 'Number': {\n      return isNaN(a) ? isNaN(b) : a === b;\n    }\n\n    case 'Array': {\n      if (a.length !== b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < a.length; i += 1) {\n        if (!equals(a[i], b[i])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    case 'Object': {\n      const aKeys = keys(a).sort();\n      const bKeys = keys(b).sort();\n\n      if (!equals(aKeys, bKeys)) {\n        return false;\n      }\n\n      for (let i = 0, l = aKeys.length; i < l; i += 1) {\n        if (!equals(a[aKeys[i]], b[aKeys[i]])) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    default: {\n      return a === b;\n    }\n  }\n}\n\nmodule.exports = curry(equals);","ctx":{"type":"function","name":"equals","string":"equals()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Function} callback predicate, will be called with each item","name":"callback","description":"<p>predicate, will be called with each item</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} list","name":"list","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} list</p>"},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"},{"type":"see","string":"some, none","local":"some, none","html":"<p>some, none</p>"},{"type":"alias","string":"all","html":"<p>all</p>"},{"type":"example","string":"N.every((number) => number > 2, [1, 2, 3]); // -> false\nN.every((number) => number > 2, [2, 3, 4]); // -> true\nN.every(N.path('nier'))([{ nier: 'hello' }, { hello: true }]); // -> false","html":"<p>N.every((number) =&gt; number &gt; 2, [1, 2, 3]); // -&gt; false<br />\nN.every((number) =&gt; number &gt; 2, [2, 3, 4]); // -&gt; true<br />\nN.every(N.path('nier'))([{ nier: 'hello' }, { hello: true }]); // -&gt; false</p>"}],"description":{"full":"<p>Returns true if all elements match the predicate, false otherwise.</p>","summary":"<p>Returns true if all elements match the predicate, false otherwise.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":22,"code":"function every(callback, list) {\n  for (let i = 0, l = list.length; i < l; i += 1) {\n    if (!callback(list[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = curry(every);","ctx":{"type":"function","name":"every","string":"every()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Function} callback predicate","name":"callback","description":"<p>predicate</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} list array to filter","name":"list","description":"<p>array to filter</p>","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Array} filtered list","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>filtered list</p>"},{"type":"see","string":"reject","local":"reject","html":"<p>reject</p>"},{"type":"example","string":"N.filter((item) => item > 2)([1, 2, 3, 4]); // -> [3, 4]\nN.filter(\n  N.has('id'),\n  [{ id: 1, name: 'Nier' }, { name: 'Hello' }, { name: null }]\n); // -> [{ id: 1, name: 'Nier' }]","html":"<p>N.filter((item) =&gt; item &gt; 2)([1, 2, 3, 4]); // -&gt; [3, 4]<br />\nN.filter(<br />\nN.has('id'),<br />\n[{ id: 1, name: 'Nier' }, { name: 'Hello' }, { name: null }]<br />\n); // -&gt; [{ id: 1, name: 'Nier' }]</p>"}],"description":{"full":"<p>Removes item from list if it does not match the predicate.</p>","summary":"<p>Removes item from list if it does not match the predicate.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":23,"code":"function filter(callback, list) {\n  const result = [];\n\n  for (let i = 0, l = list.length; i < l; i += 1) {\n    if (callback(list[i])) {\n      result.push(list[i]);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = curry(filter);","ctx":{"type":"function","name":"filter","string":"filter()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Function} callback predicate","name":"callback","description":"<p>predicate</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} list","name":"list","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} list</p>"},{"type":"return","string":"{*} first element that mached predicate","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>first element that mached predicate</p>"},{"type":"see","string":"findLast, findIndex, findLastIndex","local":"findLast, findIndex, findLastIndex","html":"<p>findLast, findIndex, findLastIndex</p>"},{"type":"example","string":"N.find((val) => val > 2, [1, 2, 3, 4]); // -> 3\nN.find((val) => val > 2, [0, 1, 2]); // -> undefined\nN.find(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -> { name: 2, id: 1 }","html":"<p>N.find((val) =&gt; val &gt; 2, [1, 2, 3, 4]); // -&gt; 3<br />\nN.find((val) =&gt; val &gt; 2, [0, 1, 2]); // -&gt; undefined<br />\nN.find(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -&gt; { name: 2, id: 1 }</p>"}],"description":{"full":"<p>Returns first element that matches the predicate. If list does not contain such element returns undefined.</p>","summary":"<p>Returns first element that matches the predicate. If list does not contain such element returns undefined.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":21,"code":"function find(callback, list) {\n  for (let i = 0, l = list.length; i < l; i += 1) {\n    const currentItem = list[i];\n\n    if (callback(currentItem)) {\n      return currentItem;\n    }\n  }\n\n  return undefined;\n}\n\nmodule.exports = curry(find);","ctx":{"type":"function","name":"find","string":"find()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Function} callback predicate","name":"callback","description":"<p>predicate</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} list","name":"list","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} list</p>"},{"type":"return","string":"{*} first element that mached predicate","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>first element that mached predicate</p>"},{"type":"see","string":"find, findLast, findLastIndex","local":"find, findLast, findLastIndex","html":"<p>find, findLast, findLastIndex</p>"},{"type":"example","string":"N.findIndex((val) => val > 2, [1, 2, 3, 4]); // -> 2\nN.findIndex((val) => val > 2, [0, 1, 2]); // -> -1\nN.findIndex(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -> 1","html":"<p>N.findIndex((val) =&gt; val &gt; 2, [1, 2, 3, 4]); // -&gt; 2<br />\nN.findIndex((val) =&gt; val &gt; 2, [0, 1, 2]); // -&gt; -1<br />\nN.findIndex(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -&gt; 1</p>"}],"description":{"full":"<p>Returns index of first element that matches the predicate. If list does not contain such element returns -1.</p>","summary":"<p>Returns index of first element that matches the predicate. If list does not contain such element returns -1.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":21,"code":"function findIndex(callback, data) {\n  for (let i = 0, l = data.length; i < l; i += 1) {\n    const currentItem = data[i];\n\n    if (callback(currentItem)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nmodule.exports = curry(findIndex);","ctx":{"type":"function","name":"findIndex","string":"findIndex()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Function} callback predicate","name":"callback","description":"<p>predicate</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} list","name":"list","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} list</p>"},{"type":"return","string":"{*} last element that mached predicate","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>last element that mached predicate</p>"},{"type":"see","string":"find, findIndex, findLastIndex","local":"find, findIndex, findLastIndex","html":"<p>find, findIndex, findLastIndex</p>"},{"type":"example","string":"N.findLast((val) => val > 2, [1, 2, 3, 4]); // -> 4\nN.findLast((val) => val > 2, [0, 1, 2]); // -> undefined\nN.findLast(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -> { name: 3, id: 2 }","html":"<p>N.findLast((val) =&gt; val &gt; 2, [1, 2, 3, 4]); // -&gt; 4<br />\nN.findLast((val) =&gt; val &gt; 2, [0, 1, 2]); // -&gt; undefined<br />\nN.findLast(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -&gt; { name: 3, id: 2 }</p>"}],"description":{"full":"<p>Returns last element that matches the predicate. If list does not contain such element returns undefined.</p>","summary":"<p>Returns last element that matches the predicate. If list does not contain such element returns undefined.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":21,"code":"function findLast(callback, data) {\n  for (let i = data.length - 1; i > -1; i -= 1) {\n    const currentItem = data[i];\n\n    if (callback(currentItem)) {\n      return currentItem;\n    }\n  }\n\n  return undefined;\n}\n\nmodule.exports = curry(findLast);","ctx":{"type":"function","name":"findLast","string":"findLast()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Function} callback predicate","name":"callback","description":"<p>predicate</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} list","name":"list","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} list</p>"},{"type":"return","string":"{*} last element that mached predicate","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>last element that mached predicate</p>"},{"type":"see","string":"find, findLast, findLastIndex","local":"find, findLast, findLastIndex","html":"<p>find, findLast, findLastIndex</p>"},{"type":"example","string":"N.findLastIndex((val) => val > 2, [1, 2, 3, 4]); // -> 3\nN.findLastIndex((val) => val > 2, [0, 1, 2]); // -> -1\nN.findLastIndex(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -> 2","html":"<p>N.findLastIndex((val) =&gt; val &gt; 2, [1, 2, 3, 4]); // -&gt; 3<br />\nN.findLastIndex((val) =&gt; val &gt; 2, [0, 1, 2]); // -&gt; -1<br />\nN.findLastIndex(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -&gt; 2</p>"}],"description":{"full":"<p>Returns index of last element that matches the predicate. If list does not contain such element returns -1.</p>","summary":"<p>Returns index of last element that matches the predicate. If list does not contain such element returns -1.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":21,"code":"function findLastIndex(callback, data) {\n  for (let i = data.length - 1; i > -1; i -= 1) {\n    const currentItem = data[i];\n\n    if (callback(currentItem)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nmodule.exports = curry(findLastIndex);","ctx":{"type":"function","name":"findLastIndex","string":"findLastIndex()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Function","html":"<p>Function</p>"},{"type":"param","string":"{Function} fn","name":"fn","description":"","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Function} fn</p>"},{"type":"return","string":"{Function}","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{Function}</p>"},{"type":"example","string":"N.flip((a, b) => `${a}${b}`)('f', 'g'); // -> 'gf'\nN.flip((a, b, c) => `${a}${b}${c}`)('f', 'g', 'h'); // -> 'hgf'","html":"<p>N.flip((a, b) =&gt; <code>${a}${b}</code>)('f', 'g'); // -&gt; 'gf'<br />\nN.flip((a, b, c) =&gt; <code>${a}${b}${c}</code>)('f', 'g', 'h'); // -&gt; 'hgf'</p>"}],"description":{"full":"<p>Takes function and returs function that acts the same as received, but accepts arguments in reversed order.</p>","summary":"<p>Takes function and returs function that acts the same as received, but accepts arguments in reversed order.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":7,"codeStart":20,"code":"function flip(fn) {\n  if (typeof fn !== 'function') {\n    throw new Error('N.flip received argument that is not function');\n  }\n\n  return curryN(fn.length, (...args) => fn(...reverse(args)));\n}\n\nmodule.exports = curry(flip);","ctx":{"type":"function","name":"flip","string":"flip()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Object","html":"<p>Object</p>"},{"type":"param","string":"{Array|string} path path to tests","name":"path","description":"<p>path to tests</p>","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array|Object} object","name":"object","description":"","types":["Array","Object"],"typesDescription":"<code>Array</code>|<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array|Object} object</p>"},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"},{"type":"see","string":"path, where, whereEq","local":"path, where, whereEq","html":"<p>path, where, whereEq</p>"},{"type":"example","string":"N.has('a', { a: 1, b: 2 }); // -> true\nN.has('c', { a: 1, b: 2 }); // -> false\nN.has(['a', 'b'], { a: { b: 1 }, c: 2 }); // -> true\nN.has(0, ['hello', 'nier']); // -> true\nN.has(2, ['hello', 'nier']); // -> false\nN.has([0, 'a', 'b'], [{ a: { b: 2 }, c: 1 }, { c: 1 }]); // -> true\nN.has([2, 'a', 'b'], [{ a: { b: 2 }, c: 1 }, { c: 1 }]); // -> false\nN.has(['a', 0, 'b'], { a: [{ b: 1 }, { c: 2 }], d: 3 }); // -> true\nN.has(['a', 2, 'b'], { a: [{ b: 1 }, { c: 2 }], d: 3 }); // -> false","html":"<p>N.has('a', { a: 1, b: 2 }); // -&gt; true<br />\nN.has('c', { a: 1, b: 2 }); // -&gt; false<br />\nN.has(['a', 'b'], { a: { b: 1 }, c: 2 }); // -&gt; true<br />\nN.has(0, ['hello', 'nier']); // -&gt; true<br />\nN.has(2, ['hello', 'nier']); // -&gt; false<br />\nN.has([0, 'a', 'b'], [{ a: { b: 2 }, c: 1 }, { c: 1 }]); // -&gt; true<br />\nN.has([2, 'a', 'b'], [{ a: { b: 2 }, c: 1 }, { c: 1 }]); // -&gt; false<br />\nN.has(['a', 0, 'b'], { a: [{ b: 1 }, { c: 2 }], d: 3 }); // -&gt; true<br />\nN.has(['a', 2, 'b'], { a: [{ b: 1 }, { c: 2 }], d: 3 }); // -&gt; false</p>"}],"description":{"full":"<p>Returns true if an object or an array has the provided path, false otherwise</p>","summary":"<p>Returns true if an object or an array has the provided path, false otherwise</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":5,"codeStart":28,"code":"function has(path, object) {\n  if (object == null || !isValidPath(path)) {\n    return false;\n  }\n\n  const pathType = typeof path;\n\n  if (pathType === 'string' || pathType === 'number') {\n    return Object.prototype.hasOwnProperty.call(object, path);\n  }\n\n  const pathToTest = path[0];\n\n  if (path.length > 1) {\n    return has(path.slice(1), object[pathToTest]);\n  }\n\n  return has(pathToTest, object);\n}\n\nmodule.exports = curry(has);","ctx":{"type":"function","name":"has","string":"has()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Array} collection","name":"collection","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} collection</p>"},{"type":"return","string":"{any} first item of collection","types":["any"],"typesDescription":"<a href=\"any.html\">any</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>first item of collection</p>"},{"type":"example","string":"N.head([1, 2, 3]); // -> 1\nN.head('nier'); // -> 'n'\nN.head({ 0: 'first', 1: 'second', length: 2 }); // -> first","html":"<p>N.head([1, 2, 3]); // -&gt; 1<br />\nN.head('nier'); // -&gt; 'n'<br />\nN.head({ 0: 'first', 1: 'second', length: 2 }); // -&gt; first</p>"}],"description":{"full":"<p>Returns first item of array like collection</p>","summary":"<p>Returns first item of array like collection</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":5,"codeStart":19,"code":"function head(collection) {\n  if (isArrayLike(collection)) {\n    return collection[0];\n  }\n\n  return undefined;\n}\n\nmodule.exports = curry(head);","ctx":{"type":"function","name":"head","string":"head()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{*} value","name":"value","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} value</p>"},{"type":"param","string":"{Array} list","name":"list","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} list</p>"},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"},{"type":"see","string":"some, every","local":"some, every","html":"<p>some, every</p>"},{"type":"alias","string":"contains","html":"<p>contains</p>"},{"type":"example","string":"N.includes(1, [1, 2, 3]); // -> true\nN.includes({ a: 1 }, [{ a: 1 }, { a: 2 }, { a: 3 }]); // -> true","html":"<p>N.includes(1, [1, 2, 3]); // -&gt; true<br />\nN.includes({ a: 1 }, [{ a: 1 }, { a: 2 }, { a: 3 }]); // -&gt; true</p>"}],"description":{"full":"<p>Returns true if provided value is equal to at least one element of the array.</p>","summary":"<p>Returns true if provided value is equal to at least one element of the array.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":6,"codeStart":23,"code":"function includes(value, list) {\n  if (!Array.isArray(list)) {\n    return false;\n  }\n\n  return some(equals(value), list);\n}\n\nmodule.exports = curry(includes);","ctx":{"type":"function","name":"includes","string":"includes()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{string} separator","name":"separator","description":"","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{string} separator</p>"},{"type":"param","string":"{Array} list","name":"list","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} list</p>"},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{string}</p>"},{"type":"example","string":"N.join('|', [1, 2, 3]); // -> '1|2|3'\nN.join(' ', ['hello','nier']); // -> 'hello nier'","html":"<p>N.join('|', [1, 2, 3]); // -&gt; '1|2|3'<br />\nN.join(' ', ['hello','nier']); // -&gt; 'hello nier'</p>"}],"description":{"full":"<p>Unites all items of the list in a string with separator between items</p>","summary":"<p>Unites all items of the list in a string with separator between items</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":18,"code":"function join(separator, list) {\n  if (!Array.isArray(list)) {\n    throw new Error('N.join receive list that cannot be joined');\n  }\n\n  return list.join(separator);\n}\n\nmodule.exports = curry(join);","ctx":{"type":"function","name":"join","string":"join()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Object","html":"<p>Object</p>"},{"type":"param","string":"{Object} object","name":"object","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object} object</p>"},{"type":"return","string":"{Array}","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{Array}</p>"},{"type":"see","string":"values","local":"values","html":"<p>values</p>"},{"type":"example","string":"N.keys({}); // -> []\nN.keys({ a: 1, b: 2, c: 3 }); // -> ['a', 'b', 'c']","html":"<p>N.keys({}); // -&gt; []<br />\nN.keys({ a: 1, b: 2, c: 3 }); // -&gt; ['a', 'b', 'c']</p>"}],"description":{"full":"<p>Returns an array containing names of enumerable own properties of the provided object.</p>","summary":"<p>Returns an array containing names of enumerable own properties of the provided object.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":19,"code":"function keys(object) {\n  if (object == null) {\n    return [];\n  }\n\n  return Object.keys(object);\n}\n\nmodule.exports = curry(keys);","ctx":{"type":"function","name":"keys","string":"keys()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{fn} callback function that will be called on each element","name":"callback","description":"<p>function that will be called on each element</p>","types":["fn"],"typesDescription":"<a href=\"fn.html\">fn</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} data","name":"data","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} data</p>"},{"type":"return","string":"{Array}","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{Array}</p>"},{"type":"example","string":"N.map((val) => val * 2, [1, 2, 3]); // -> [2, 4, 6]\nN.map((name) => `Hello, ${name}!`, ['nier', 'you']); // -> ['Hello, nier!', 'Hello, you!']","html":"<p>N.map((val) =&gt; val * 2, [1, 2, 3]); // -&gt; [2, 4, 6]<br />\nN.map((name) =&gt; <code>Hello, ${name}!</code>, ['nier', 'you']); // -&gt; ['Hello, nier!', 'Hello, you!']</p>"}],"description":{"full":"<p>Creates a new array with the results of calling a provided function on every element in the calling array.</p>","summary":"<p>Creates a new array with the results of calling a provided function on every element in the calling array.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":18,"code":"function map(callback, data) {\n  const result = [];\n\n  for (let i = 0, l = data.length; i < l; i += 1) {\n    result.push(callback(data[i]));\n  }\n\n  return result;\n}\n\nmodule.exports = curry(map);","ctx":{"type":"function","name":"map","string":"map()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Number","html":"<p>Number</p>"},{"type":"param","string":"{*} a","name":"a","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} a</p>"},{"type":"param","string":"{*} b","name":"b","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} b</p>"},{"type":"return","string":"{*}","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{*}</p>"},{"type":"see","string":"min","local":"min","html":"<p>min</p>"},{"type":"example","string":"N.max(1, 2); // -> 2\nN.max('a', 'b'); // -> 'b'","html":"<p>N.max(1, 2); // -&gt; 2<br />\nN.max('a', 'b'); // -&gt; 'b'</p>"}],"description":{"full":"<p>Returns the max of its two arguments.</p>","summary":"<p>Returns the max of its two arguments.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":20,"code":"function max(a, b) {\n  return a > b ? a : b;\n}\n\nmodule.exports = curry(max);","ctx":{"type":"function","name":"max","string":"max()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Number","html":"<p>Number</p>"},{"type":"param","string":"{*} a","name":"a","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} a</p>"},{"type":"param","string":"{*} b","name":"b","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} b</p>"},{"type":"return","string":"{*}","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{*}</p>"},{"type":"see","string":"max","local":"max","html":"<p>max</p>"},{"type":"example","string":"N.min(1, 2); // -> 1\nN.min('a', 'b'); // -> 'a'","html":"<p>N.min(1, 2); // -&gt; 1<br />\nN.min('a', 'b'); // -&gt; 'a'</p>"}],"description":{"full":"<p>Returns the min of its two arguments.</p>","summary":"<p>Returns the min of its two arguments.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":20,"code":"function min(a, b) {\n  return a > b ? b : a;\n}\n\nmodule.exports = curry(min);","ctx":{"type":"function","name":"min","string":"min()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Function} callback predicate, will be called with each item","name":"callback","description":"<p>predicate, will be called with each item</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} list","name":"list","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} list</p>"},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"},{"type":"see","string":"some, every","local":"some, every","html":"<p>some, every</p>"},{"type":"example","string":"N.none((number) => number > 2, [1, 2, 3]); // -> false\nN.none((number) => number < 2, [2, 3, 4]); // -> true\nN.none(N.path('nier'))([{ nier: 'hello' }, { hello: true }]); // -> false","html":"<p>N.none((number) =&gt; number &gt; 2, [1, 2, 3]); // -&gt; false<br />\nN.none((number) =&gt; number &lt; 2, [2, 3, 4]); // -&gt; true<br />\nN.none(N.path('nier'))([{ nier: 'hello' }, { hello: true }]); // -&gt; false</p>"}],"description":{"full":"<p>Returns true if no elements match the predicate, false otherwise.</p>","summary":"<p>Returns true if no elements match the predicate, false otherwise.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":21,"code":"function none(callback, list) {\n  for (let i = 0, l = list.length; i < l; i += 1) {\n    if (callback(list[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = curry(none);","ctx":{"type":"function","name":"none","string":"none()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{string} prop property that will be used to create object keys","name":"prop","description":"<p>property that will be used to create object keys</p>","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} list array of objects","name":"list","description":"<p>array of objects</p>","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Object} normalized object","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>normalized object</p>"},{"type":"see","string":"reduce","local":"reduce","html":"<p>reduce</p>"},{"type":"example","string":"N.normalize(\n  'id',\n  [{ id: 1, name: 'name-1' }, { id: 2, name: 'name-2' }, { id: 3, name: 'name-3' }]\n);\n\n// Will result into:\n// {\n//   '1': { id: 1, name: 'name-1' },\n//   '2': { id: 2, name: 'name-2' },\n//   '3': { id: 2, name: 'name-3' },\n// }","html":"<p>N.normalize(<br />\n'id',<br />\n[{ id: 1, name: 'name-1' }, { id: 2, name: 'name-2' }, { id: 3, name: 'name-3' }]<br />\n);</p>\n<p>// Will result into:<br />\n// {<br />\n//   '1': { id: 1, name: 'name-1' },<br />\n//   '2': { id: 2, name: 'name-2' },<br />\n//   '3': { id: 2, name: 'name-3' },<br />\n// }</p>"}],"description":{"full":"<p>Turns array of objects into normalized object structure based on provided property.</p>","summary":"<p>Turns array of objects into normalized object structure based on provided property.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":6,"codeStart":31,"code":"function normalize(prop, list) {\n  return reduce((acc, item) => {\n    if (has(prop, item)) {\n      acc[item[prop]] = item;\n    }\n\n    return acc;\n  }, {}, list);\n}\n\nmodule.exports = curry(normalize);","ctx":{"type":"function","name":"normalize","string":"normalize()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Function","html":"<p>Function</p>"},{"type":"param","string":"{Function} fn function that should be binded","name":"fn","description":"<p>function that should be binded</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} predefined list of arguments that function should be binded to","name":"predefined","description":"<p>list of arguments that function should be binded to</p>","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Function} new function, binded to arguments","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>new function, binded to arguments</p>"},{"type":"see","string":"partialRight","local":"partialRight","html":"<p>partialRight</p>"},{"type":"example","string":"N.partial((a, b) => a + b, [1])(2); // -> 3\nN.partial(greet, name) => `${greet} ${name}`, ['hello'])('nier'); // -> 'hello nier'","html":"<p>N.partial((a, b) =&gt; a + b, [1])(2); // -&gt; 3<br />\nN.partial(greet, name) =&gt; <code>${greet} ${name}</code>, ['hello'])('nier'); // -&gt; 'hello nier'</p>"}],"description":{"full":"<p>Binds function to specified argument list.</p>","summary":"<p>Binds function to specified argument list.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":20,"code":"function partial(fn, predefined) {\n  if (typeof fn !== 'function') {\n    throw new Error('N.partial did not receive function');\n  }\n\n  return (...args) => fn(...predefined, ...args);\n}\n\nmodule.exports = curry(partial);","ctx":{"type":"function","name":"partial","string":"partial()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Function","html":"<p>Function</p>"},{"type":"param","string":"{Function} fn function that should be binded","name":"fn","description":"<p>function that should be binded</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} predefined list of arguments that function should be binded to","name":"predefined","description":"<p>list of arguments that function should be binded to</p>","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Function} new function, binded to arguments","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>new function, binded to arguments</p>"},{"type":"see","string":"partial","local":"partial","html":"<p>partial</p>"},{"type":"example","string":"N.partialRight((a, b) => a / b, [3])(6); // -> 2\nN.partial(greet, name) => `${greet} ${name}`, ['nier'])('hello'); // -> 'hello nier'","html":"<p>N.partialRight((a, b) =&gt; a / b, [3])(6); // -&gt; 2<br />\nN.partial(greet, name) =&gt; <code>${greet} ${name}</code>, ['nier'])('hello'); // -&gt; 'hello nier'</p>"}],"description":{"full":"<p>Binds function to specified argument list.</p>","summary":"<p>Binds function to specified argument list.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":20,"code":"function partialRight(fn, predefined) {\n  if (typeof fn !== 'function') {\n    throw new Error('N.partialRight did not receive function');\n  }\n\n  return (...args) => fn(...args, ...predefined);\n}\n\nmodule.exports = curry(partialRight);","ctx":{"type":"function","name":"partialRight","string":"partialRight()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Object","html":"<p>Object</p>"},{"type":"param","string":"{Array|string} pathTo path to retrieve","name":"pathTo","description":"<p>path to retrieve</p>","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Object} object","name":"object","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object} object</p>"},{"type":"return","string":"{*}","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{*}</p>"},{"type":"example","string":"N.path('a', { a: 1, b: 2 }); // -> 1\nN.path(['a', 'b'], { a: { b: 1 }, c: 3 }); // -> 1\nN.path(['a', 'b', 'c'], { a: 1 }); // -> undefined","html":"<p>N.path('a', { a: 1, b: 2 }); // -&gt; 1<br />\nN.path(['a', 'b'], { a: { b: 1 }, c: 3 }); // -&gt; 1<br />\nN.path(['a', 'b', 'c'], { a: 1 }); // -&gt; undefined</p>"}],"description":{"full":"<p>Returns value at provided object path or undefined if path does not exist</p>","summary":"<p>Returns value at provided object path or undefined if path does not exist</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":5,"codeStart":20,"code":"function path(pathTo, object) {\n  if (!has(pathTo, object)) {\n    return undefined;\n  }\n\n  if (typeof pathTo === 'string') {\n    return object[pathTo];\n  }\n\n  let acc = object[pathTo[0]];\n  for (let i = 1, l = pathTo.length; i < l; i += 1) {\n    acc = acc[pathTo[i]];\n  }\n\n  return acc;\n}\n\nmodule.exports = curry(path);","ctx":{"type":"function","name":"path","string":"path()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Function","html":"<p>Function</p>"},{"type":"param","string":"{...Function} fns functions to compose","name":"fns","description":"<p>functions to compose</p>","types":["Function"],"typesDescription":"...<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":true},{"type":"return","string":"{Function} composed function","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>composed function</p>"},{"type":"example","string":"N.pipe(val => val + 1, val => val * 2)(1); // -> 1 + 1 -> 2 * 2 -> 4\nN.pipe(N.trim, N.upperFirst)('hello!  '); // N.upperFirst('hello!  ') -> N.trim('Hello!  ') -> 'Hello!'","html":"<p>N.pipe(val =&gt; val + 1, val =&gt; val * 2)(1); // -&gt; 1 + 1 -&gt; 2 * 2 -&gt; 4<br />\nN.pipe(N.trim, N.upperFirst)('hello!  '); // N.upperFirst('hello!  ') -&gt; N.trim('Hello!  ') -&gt; 'Hello!'</p>"}],"description":{"full":"<p>Performs first-to-last function composition. The first function may have any arity, the remaining functions must be unary.</p>","summary":"<p>Performs first-to-last function composition. The first function may have any arity, the remaining functions must be unary.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":6,"codeStart":19,"code":"module.exports = function pipe(...fns) {\n  if (fns.length === 0) {\n    throw new Error('pipe requires at least one function argument');\n  }\n\n  const firstFunction = head(fns);\n  const tailFunctions = slice(1, fns.length, fns);\n\n  return (...args) => reduce(\n    (acc, fn) => fn(acc),\n    firstFunction(...args),\n    tailFunctions\n  );\n};","ctx":{"type":"method","receiver":"module","name":"exports","string":"module.exports()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{*} value element to add at the begining of array","name":"value","description":"<p>element to add at the begining of array</p>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} data array to add element to","name":"data","description":"<p>array to add element to</p>","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Array} new array with the provided value in front","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>new array with the provided value in front</p>"},{"type":"see","string":"prepend, concat","local":"prepend, concat","html":"<p>prepend, concat</p>"},{"type":"example","string":"N.prepend('nier', ['hello']); // -> ['nier', 'hello']\nN.prepend('who loves you?')(['nier']); // ['who loves you?', 'nier']\nN.prepend(['nier'], ['hello']); // [['nier'], 'hello']","html":"<p>N.prepend('nier', ['hello']); // -&gt; ['nier', 'hello']<br />\nN.prepend('who loves you?')(['nier']); // ['who loves you?', 'nier']<br />\nN.prepend(['nier'], ['hello']); // [['nier'], 'hello']</p>"}],"description":{"full":"<p>Creates new array containing the contents of the given array or array like structure,<br />\nwith the give value at the front, folowed by the content of the array.<br />\nNote that prepend will create only a shallow copy of provided data structure.</p>","summary":"<p>Creates new array containing the contents of the given array or array like structure,<br />\nwith the give value at the front, folowed by the content of the array.<br />\nNote that prepend will create only a shallow copy of provided data structure.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":23,"code":"function prepend(element, array) {\n  return [element, ...array];\n}\n\nmodule.exports = curry(prepend);","ctx":{"type":"function","name":"prepend","string":"prepend()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Function} callback function that will be called with each item","name":"callback","description":"<p>function that will be called with each item</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{*} initialValue initial value that will be used as accumulator","name":"initialValue","description":"<p>initial value that will be used as accumulator</p>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} data","name":"data","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} data</p>"},{"type":"return","string":"{*}","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{*}</p>"},{"type":"see","string":"normalize","local":"normalize","html":"<p>normalize</p>"},{"type":"example","string":"N.reduce((acc, item) => acc + item, 10, [1, 2, 3]); // -> 16","html":"<p>N.reduce((acc, item) =&gt; acc + item, 10, [1, 2, 3]); // -&gt; 16</p>"}],"description":{"full":"<p>Applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.</p>","summary":"<p>Applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":20,"code":"function reduce(callback, initialValue, data) {\n  let acc = initialValue;\n\n  for (let i = 0, l = data.length; i < l; i += 1) {\n    acc = callback(acc, data[i]);\n  }\n\n  return acc;\n}\n\nmodule.exports = curry(reduce);","ctx":{"type":"function","name":"reduce","string":"reduce()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Function} callback predicate","name":"callback","description":"<p>predicate</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} list array to filter","name":"list","description":"<p>array to filter</p>","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Array} filtered list","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>filtered list</p>"},{"type":"see","string":"filter","local":"filter","html":"<p>filter</p>"},{"type":"example","string":"N.reject((item) => item > 2)([1, 2, 3, 4]); // -> [1, 2]\nN.reject(\n  N.whereEq({ id: null }),\n  [{ id: null, name: 1 }, { id: 'nier', name: 2 }, { id: null, name: 3 }]\n); // -> [{ id: 'nier', name: 2 }]","html":"<p>N.reject((item) =&gt; item &gt; 2)([1, 2, 3, 4]); // -&gt; [1, 2]<br />\nN.reject(<br />\nN.whereEq({ id: null }),<br />\n[{ id: null, name: 1 }, { id: 'nier', name: 2 }, { id: null, name: 3 }]<br />\n); // -&gt; [{ id: 'nier', name: 2 }]</p>"}],"description":{"full":"<p>Removes item from list if it matches the predicate.</p>","summary":"<p>Removes item from list if it matches the predicate.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":23,"code":"function reject(callback, data) {\n  const result = [];\n\n  for (let i = 0, length = data.length; i < length; i += 1) {\n    if (!callback(data[i])) {\n      result.push(data[i]);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = curry(reject);","ctx":{"type":"function","name":"reject","string":"reject()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Array|string} collection data to reverse","name":"collection","description":"<p>data to reverse</p>","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Array|string}","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{Array|string}</p>"},{"type":"example","string":"N.reverse([1, 2, 3]); // -> [3, 2, 1]\nN.reverse('nier'); // -> 'rein'","html":"<p>N.reverse([1, 2, 3]); // -&gt; [3, 2, 1]<br />\nN.reverse('nier'); // -&gt; 'rein'</p>"}],"description":{"full":"<p>Returns new collection with reversed order.</p>","summary":"<p>Returns new collection with reversed order.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":5,"codeStart":18,"code":"function reverse(collection) {\n  if (!isArrayLike(collection)) {\n    throw new Error('N.reverse is not able to work with data that is not array or array like value');\n  }\n\n  const result = [];\n\n  for (let i = 0, l = collection.length; i < l; i += 1) {\n    result[i] = collection[l - i - 1];\n  }\n\n  return typeof collection === 'string' ? result.join('') : result;\n}\n\nmodule.exports = curry(reverse);","ctx":{"type":"function","name":"reverse","string":"reverse()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Object","html":"<p>Object</p>"},{"type":"param","string":"{Array|string} path path to property, where value should be set","name":"path","description":"<p>path to property, where value should be set</p>","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{*} value","name":"value","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} value</p>"},{"type":"param","string":"{Object} object","name":"object","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object} object</p>"},{"type":"return","string":"{Object} shallow copy of object with new value in path","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>shallow copy of object with new value in path</p>"},{"type":"see","string":"setWith, unset","local":"setWith, unset","html":"<p>setWith, unset</p>"},{"type":"example","string":"N.set('prop', 'value', { a: 1 }); // -> { a: 1, prop: 'value' }\nN.set('prop', 'value', { prop: 1 }); // -> { prop: 'value' }\nN.set(['nested', 'prop'], 'value', { a: 1 }); // -> { a: 1, nested: { prop: 'value' } }\nN.set(['nested', 'prop'], 'value', { nested: { prop: 1 } }); // -> { nested: { prop: 'value' } }","html":"<p>N.set('prop', 'value', { a: 1 }); // -&gt; { a: 1, prop: 'value' }<br />\nN.set('prop', 'value', { prop: 1 }); // -&gt; { prop: 'value' }<br />\nN.set(['nested', 'prop'], 'value', { a: 1 }); // -&gt; { a: 1, nested: { prop: 'value' } }<br />\nN.set(['nested', 'prop'], 'value', { nested: { prop: 1 } }); // -&gt; { nested: { prop: 'value' } }</p>"}],"description":{"full":"<p>Creates shallow copy of object and cretes or overrides value at provided path.<br />\nCreates shallow copies for all nested object paths.</p>","summary":"<p>Creates shallow copy of object and cretes or overrides value at provided path.<br />\nCreates shallow copies for all nested object paths.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":6,"codeStart":26,"code":"function set(path, value, object) {\n  if (!isValidPath(path)) {\n    return object;\n  }\n\n  if (typeof path === 'string') {\n    return Object.assign({}, object, { [path]: value });\n  }\n\n  if (path.length === 0) {\n    return value;\n  }\n\n  const pathToSet = path[0];\n  let finalValue = value;\n\n  if (path.length > 1) {\n    const nextObject = has(pathToSet, object) ? object[pathToSet] : {};\n    finalValue = set(path.slice(1), value, nextObject);\n  }\n\n  return set(pathToSet, finalValue, object);\n}\n\nmodule.exports = curry(set);","ctx":{"type":"function","name":"set","string":"set()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Object","html":"<p>Object</p>"},{"type":"param","string":"{Array|string} pathToSet path to property, where value should be set","name":"pathToSet","description":"<p>path to property, where value should be set</p>","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Function} callback","name":"callback","description":"","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Function} callback</p>"},{"type":"param","string":"{Object} object","name":"object","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object} object</p>"},{"type":"return","string":"{Object} shallow copy of object with new value in path","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>shallow copy of object with new value in path</p>"},{"type":"see","string":"set, unset, evolve","local":"set, unset, evolve","html":"<p>set, unset, evolve</p>"},{"type":"example","string":"N.setWith('a', (val) => val + 1, { a: 1 }); // -> { a: 2 }\nN.setWith(['a', 'b'], (val) => val + 1, { a: { b: 1 } }); // -> { a: { b: 2 } }\nN.setWith('a', (val) => val === undefined, { b: 1 }); // -> { a: true, b: 1 }","html":"<p>N.setWith('a', (val) =&gt; val + 1, { a: 1 }); // -&gt; { a: 2 }<br />\nN.setWith(['a', 'b'], (val) =&gt; val + 1, { a: { b: 1 } }); // -&gt; { a: { b: 2 } }<br />\nN.setWith('a', (val) =&gt; val === undefined, { b: 1 }); // -&gt; { a: true, b: 1 }</p>"}],"description":{"full":"<p>Works exactly like set function but instead of accepting actual value,<br />\nsetWith accept callback that will receive current value of the object at path,<br />\nthe result of calling callback with value will be set to object path.<br />\nIf object does not have value at provided path callback will receive undefined.</p>","summary":"<p>Works exactly like set function but instead of accepting actual value,<br />\nsetWith accept callback that will receive current value of the object at path,<br />\nthe result of calling callback with value will be set to object path.<br />\nIf object does not have value at provided path callback will receive undefined.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":7,"codeStart":28,"code":"function setWith(pathToSet, callback, object) {\n  if (has(pathToSet, object)) {\n    return set(pathToSet, callback(path(pathToSet, object)), object);\n  }\n\n  return set(pathToSet, callback(undefined), object);\n}\n\nmodule.exports = curry(setWith);","ctx":{"type":"function","name":"setWith","string":"setWith()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{number} begin start index","name":"begin","description":"<p>start index</p>","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{number} end slice end","name":"end","description":"<p>slice end</p>","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array|string} collection","name":"collection","description":"","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array|string} collection</p>"},{"type":"return","string":"{Array|string}","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{Array|string}</p>"},{"type":"example","string":"N.slice(0, 2, [0, 1, 2, 3, 4]); // -> [0, 1]\nN.slice(0, -1, [0, 1, 2, 3, 4]); // -> [0, 1, 2, 3]\nN.slice(2, -2, [0, 1, 2, 3, 4]); // -> [2]\n * N.slice(0, 2, 'nier'); // -> 'ni'","html":"<p>N.slice(0, 2, [0, 1, 2, 3, 4]); // -&gt; [0, 1]<br />\nN.slice(0, -1, [0, 1, 2, 3, 4]); // -&gt; [0, 1, 2, 3]<br />\nN.slice(2, -2, [0, 1, 2, 3, 4]); // -&gt; [2]</p>\n<ul>\n<li>N.slice(0, 2, 'nier'); // -&gt; 'ni'</li>\n</ul>"}],"description":{"full":"<p>Returns shallow copy of collection part selected from the <code>begin</code> (inclusive) to <code>end</code> (exclusive).</p>","summary":"<p>Returns shallow copy of collection part selected from the <code>begin</code> (inclusive) to <code>end</code> (exclusive).</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":6,"codeStart":23,"code":"function slice(from, to, collection) {\n  if (!isArrayLike(collection)) {\n    throw new Error('N.slice received collection that is not array or array like');\n  }\n\n  const arrayCollection = cloneArrayLike(collection);\n  const slicedCollection = arrayCollection.slice(from, to);\n\n  return typeof collection === 'string' ? slicedCollection.join('') : slicedCollection;\n}\n\nmodule.exports = curry(slice);","ctx":{"type":"function","name":"slice","string":"slice()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Function} callback predicate, will be called with each item","name":"callback","description":"<p>predicate, will be called with each item</p>","types":["Function"],"typesDescription":"<code>Function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} list","name":"list","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} list</p>"},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"},{"type":"see","string":"some, every","local":"some, every","html":"<p>some, every</p>"},{"type":"alias","string":"any","html":"<p>any</p>"},{"type":"example","string":"N.some((number) => number > 2, [1, 2, 3]); // -> true\nN.some((number) => number < 2, [2, 3, 4]); // -> false\nN.some(N.path('nier'))([{ nier: 'hello' }, { hello: true }]); // -> true","html":"<p>N.some((number) =&gt; number &gt; 2, [1, 2, 3]); // -&gt; true<br />\nN.some((number) =&gt; number &lt; 2, [2, 3, 4]); // -&gt; false<br />\nN.some(N.path('nier'))([{ nier: 'hello' }, { hello: true }]); // -&gt; true</p>"}],"description":{"full":"<p>Returns true if any element match the predicate, false otherwise.</p>","summary":"<p>Returns true if any element match the predicate, false otherwise.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":22,"code":"function some(callback, data) {\n  for (let i = 0, length = data.length; i < length; i += 1) {\n    if (callback(data[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nmodule.exports = curry(some);","ctx":{"type":"function","name":"some","string":"some()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"String","html":"<p>String</p>"},{"type":"param","string":"{string} str","name":"str","description":"","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{string} str</p>"},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{string}</p>"},{"type":"see","string":"toUpperCase, upperFirst","local":"toUpperCase, upperFirst","html":"<p>toUpperCase, upperFirst</p>"},{"type":"example","string":"N.toLowerCase('Hello!'); // -> 'hello!'\nN.toLowerCase('HELLO!'); // -> 'hello!'\nN.toLowerCase('hello!'); // -> 'hello!'","html":"<p>N.toLowerCase('Hello!'); // -&gt; 'hello!'<br />\nN.toLowerCase('HELLO!'); // -&gt; 'hello!'<br />\nN.toLowerCase('hello!'); // -&gt; 'hello!'</p>"}],"description":{"full":"<p>Convers all string characters to lower case.</p>","summary":"<p>Convers all string characters to lower case.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":20,"code":"function toLowerCase(str) {\n  if (typeof str !== 'string') {\n    throw new Error('N.toLowerCase received argument that is not string');\n  }\n\n  return str.toLowerCase();\n}\n\nmodule.exports = curry(toLowerCase);","ctx":{"type":"function","name":"toLowerCase","string":"toLowerCase()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"String","html":"<p>String</p>"},{"type":"param","string":"{string} str","name":"str","description":"","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{string} str</p>"},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{string}</p>"},{"type":"see","string":"toLowerCase, upperFirst","local":"toLowerCase, upperFirst","html":"<p>toLowerCase, upperFirst</p>"},{"type":"example","string":"N.toUpperCase('Hello!'); // -> 'Hello!'\nN.toUpperCase('HELLO!'); // -> 'Hello!'\nN.toUpperCase('hello!'); // -> 'Hello!'","html":"<p>N.toUpperCase('Hello!'); // -&gt; 'Hello!'<br />\nN.toUpperCase('HELLO!'); // -&gt; 'Hello!'<br />\nN.toUpperCase('hello!'); // -&gt; 'Hello!'</p>"}],"description":{"full":"<p>Convers all string characters to upper case.</p>","summary":"<p>Convers all string characters to upper case.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":20,"code":"function toUpperCase(str) {\n  if (typeof str !== 'string') {\n    throw new Error('N.toUpperCase received argument that is not string');\n  }\n\n  return str.toUpperCase();\n}\n\nmodule.exports = curry(toUpperCase);","ctx":{"type":"function","name":"toUpperCase","string":"toUpperCase()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Language","html":"<p>Language</p>"},{"type":"param","string":"{*} value","name":"value","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} value</p>"},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{string}</p>"},{"type":"example","string":"N.type(null); // -> 'Null'\nN.type(undefined); // -> 'Undefined'\nN.type('hello'); // -> 'String'\nN.type(1); // -> 'Number'\nN.type({ a: 1 }); // -> 'Object'\nN.type([1, 2]); // -> 'Array'\nN.type(f => f); // -> 'Function'\nN.type(/a/g); // -> 'RegExp'","html":"<p>N.type(null); // -&gt; 'Null'<br />\nN.type(undefined); // -&gt; 'Undefined'<br />\nN.type('hello'); // -&gt; 'String'<br />\nN.type(1); // -&gt; 'Number'<br />\nN.type({ a: 1 }); // -&gt; 'Object'<br />\nN.type([1, 2]); // -&gt; 'Array'<br />\nN.type(f =&gt; f); // -&gt; 'Function'<br />\nN.type(/a/g); // -&gt; 'RegExp'</p>"}],"description":{"full":"<p>Returns single word description of the value type</p>","summary":"<p>Returns single word description of the value type</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":23,"code":"function type(value) {\n  if (value === null) {\n    return 'Null';\n  }\n\n  if (value === undefined) {\n    return 'Undefined';\n  }\n\n  return Object.prototype.toString.call(value).slice(8, -1);\n}\n\nmodule.exports = curry(type);","ctx":{"type":"function","name":"type","string":"type()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Array} list data to unnest","name":"list","description":"<p>data to unnest</p>","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Array} unnested list","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>unnested list</p>"},{"type":"see","string":"flatten","local":"flatten","html":"<p>flatten</p>"},{"type":"example","string":"N.unnest([[1, 2], [3], [4]]); // -> [1, 2, 3, 4]\nN.unnest([1, [2], [3], [[4]]]); // -> [1, 2, 3, [4]]\nN.unnest([1, 2, 3, 4]); // -> [1, 2, 3, 4]","html":"<p>N.unnest([[1, 2], [3], [4]]); // -&gt; [1, 2, 3, 4]<br />\nN.unnest([1, [2], [3], [[4]]]); // -&gt; [1, 2, 3, [4]]<br />\nN.unnest([1, 2, 3, 4]); // -&gt; [1, 2, 3, 4]</p>"}],"description":{"full":"<p>Removes one level of nesting from the list</p>","summary":"<p>Removes one level of nesting from the list</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":20,"code":"function unnest(list) {\n  if (!Array.isArray(list)) {\n    throw new Error('N.unnest recieved data that is not an array');\n  }\n\n  const result = [];\n\n  for (let i = 0, l = list.length; i < l; i += 1) {\n    if (Array.isArray(list[i])) {\n      result.push(...list[i]);\n    } else {\n      result.push(list[i]);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = curry(unnest);","ctx":{"type":"function","name":"unnest","string":"unnest()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Object","html":"<p>Object</p>"},{"type":"param","string":"{Array|string} path path to property that should be removed","name":"path","description":"<p>path to property that should be removed</p>","types":["Array","string"],"typesDescription":"<code>Array</code>|<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{*} value","name":"value","description":"","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{*} value</p>"},{"type":"param","string":"{Object} object","name":"object","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object} object</p>"},{"type":"return","string":"{Object} shallow copy of object without value in path","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>shallow copy of object without value in path</p>"},{"type":"see","string":"unset, setWith","local":"unset, setWith","html":"<p>unset, setWith</p>"},{"type":"example","string":"N.unset('prop', { a: 1, prop: 2 }); // -> { a: 1 }\nN.unset('prop', { prop: 1 }); // -> {}\nN.unset(['nested', 'prop'], 'value', { a: 1, nested: { prop: 'value' } }); // -> { a: 1, nested: {} }\nN.unset('nested', 'value', { a: 1, nested: { prop: 'value' } }); // -> { a: 1 }","html":"<p>N.unset('prop', { a: 1, prop: 2 }); // -&gt; { a: 1 }<br />\nN.unset('prop', { prop: 1 }); // -&gt; {}<br />\nN.unset(['nested', 'prop'], 'value', { a: 1, nested: { prop: 'value' } }); // -&gt; { a: 1, nested: {} }<br />\nN.unset('nested', 'value', { a: 1, nested: { prop: 'value' } }); // -&gt; { a: 1 }</p>"}],"description":{"full":"<p>Creates shallow copy of object and deletes value at provided path if it exists.<br />\nCreates shallow copies for all nested object referenced in path if path exists.</p>","summary":"<p>Creates shallow copy of object and deletes value at provided path if it exists.<br />\nCreates shallow copies for all nested object referenced in path if path exists.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":12,"codeStart":32,"code":"function unset(path, object) {\n  if (!has(path, object)) {\n    return object;\n  }\n\n  if (typeof path === 'string') {\n    return removeProp(path, object);\n  }\n\n  const lastPathIndex = path.length - 1;\n\n  let finalObject = object;\n  for (let i = 0; i < lastPathIndex; i += 1) {\n    finalObject = finalObject[path[i]];\n  }\n\n  return set(\n    path.slice(0, lastPathIndex),\n    removeProp(path[lastPathIndex], finalObject),\n    object\n  );\n}\n\nmodule.exports = curry(unset);","ctx":{"type":"function","name":"unset","string":"unset()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{number} index position to update","name":"index","description":"<p>position to update</p>","types":["number"],"typesDescription":"<code>number</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{*} value value to set at position","name":"value","description":"<p>value to set at position</p>","types":[],"typesDescription":"<code>*</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Array} array","name":"array","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} array</p>"},{"type":"return","string":"{Array} shallow array copy","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"<p>shallow array copy</p>"},{"type":"example","string":"N.update(0, 'hello', ['hi', 'nier']); // -> ['hello', 'nier']\nN.update(5, 'hello', ['hi', 'nier']); // -> ['hi', 'nier']\nN.update(-1, 'nier', ['hi', 'there', 'you']); // -> ['hi', 'there', 'nier']","html":"<p>N.update(0, 'hello', ['hi', 'nier']); // -&gt; ['hello', 'nier']<br />\nN.update(5, 'hello', ['hi', 'nier']); // -&gt; ['hi', 'nier']<br />\nN.update(-1, 'nier', ['hi', 'there', 'you']); // -&gt; ['hi', 'there', 'nier']</p>"}],"description":{"full":"<p>Creates new copy of the array with the element at index replaced with provided value.<br />\nIf array does not have value at provided index, it won't be set and the original array will be returned.<br />\nNote that update will only create shallow copy of the array.</p>","summary":"<p>Creates new copy of the array with the element at index replaced with provided value.<br />\nIf array does not have value at provided index, it won't be set and the original array will be returned.<br />\nNote that update will only create shallow copy of the array.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":5,"codeStart":23,"code":"function update(index, value, array) {\n  const { length } = array;\n  const indexToUpdate = index < 0 ? length + index : index;\n\n  if (!has(indexToUpdate, array)) {\n    return array;\n  }\n\n  const result = [];\n\n  for (let i = 0; i < length; i += 1) {\n    if (i === indexToUpdate) {\n      result[i] = value;\n    } else {\n      result[i] = array[i];\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = curry(update);","ctx":{"type":"function","name":"update","string":"update()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"String","html":"<p>String</p>"},{"type":"param","string":"{string} str","name":"str","description":"","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{string} str</p>"},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{string}</p>"},{"type":"see","string":"toUpperCase, toLowerCase","local":"toUpperCase, toLowerCase","html":"<p>toUpperCase, toLowerCase</p>"},{"type":"example","string":"N.upperFirst('hello!'); // -> 'Hello!'\nN.upperFirst('Hello!'); // -> 'Hello!'\nN.upperFirst('hELLO!'); // -> 'HELLO!'","html":"<p>N.upperFirst('hello!'); // -&gt; 'Hello!'<br />\nN.upperFirst('Hello!'); // -&gt; 'Hello!'<br />\nN.upperFirst('hELLO!'); // -&gt; 'HELLO!'</p>"}],"description":{"full":"<p>Convers first character of a string to upper case.</p>","summary":"<p>Convers first character of a string to upper case.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":4,"codeStart":20,"code":"function upperFirst(str) {\n  if (typeof str !== 'string') {\n    throw new Error('N.upperFirst received argument that is not string');\n  }\n\n  return str.charAt(0).toUpperCase() + str.substring(1);\n}\n\nmodule.exports = curry(upperFirst);","ctx":{"type":"function","name":"upperFirst","string":"upperFirst()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Object","html":"<p>Object</p>"},{"type":"param","string":"{Object} object","name":"object","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object} object</p>"},{"type":"return","string":"{Array}","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{Array}</p>"},{"type":"see","string":"values","local":"values","html":"<p>values</p>"},{"type":"example","string":"N.values({}); // -> []\nN.values({ a: 1, b: 2, c: 3 }); // -> [1, 2, 3]","html":"<p>N.values({}); // -&gt; []<br />\nN.values({ a: 1, b: 2, c: 3 }); // -&gt; [1, 2, 3]</p>"}],"description":{"full":"<p>Returns an array of enumerable own properties of the provided object.</p>","summary":"<p>Returns an array of enumerable own properties of the provided object.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":5,"codeStart":20,"code":"function values(object) {\n  const objectKeys = keys(object);\n  const result = [];\n\n  for (let i = 0, l = objectKeys.length; i < l; i += 1) {\n    result.push(object[objectKeys[i]]);\n  }\n\n  return result;\n}\n\nmodule.exports = curry(values);","ctx":{"type":"function","name":"values","string":"values()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Object","html":"<p>Object</p>"},{"type":"param","string":"{Object} spec","name":"spec","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object} spec</p>"},{"type":"param","string":"{Object} data","name":"data","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object} data</p>"},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"},{"type":"see","string":"whereEq","local":"whereEq","html":"<p>whereEq</p>"},{"type":"example","string":"const spec = N.where({ a: (val) => val > 1, b: (val) => val > 2 });\nspec({ a: 1, b: 2 }); // -> false\nspec({ a: 2, b: 3 }); // -> true\nspec({ a: 4 }); // -> false","html":"<p>const spec = N.where({ a: (val) =&gt; val &gt; 1, b: (val) =&gt; val &gt; 2 });<br />\nspec({ a: 1, b: 2 }); // -&gt; false<br />\nspec({ a: 2, b: 3 }); // -&gt; true<br />\nspec({ a: 4 }); // -&gt; false</p>"}],"description":{"full":"<p>Takes a spec object and a test object, returs true if test object fully satisfies spec.<br />\nEach of spec object property must be a function, otherwise where will return false.</p>","summary":"<p>Takes a spec object and a test object, returs true if test object fully satisfies spec.<br />\nEach of spec object property must be a function, otherwise where will return false.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":6,"codeStart":25,"code":"function where(spec, data) {\n  const specKeys = keys(spec);\n  return every((key) => {\n    if (typeof spec[key] === 'function') {\n      return spec[key](data[key]);\n    }\n\n    return false;\n  }, specKeys);\n}\n\nmodule.exports = curry(where);","ctx":{"type":"function","name":"where","string":"where()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Object","html":"<p>Object</p>"},{"type":"param","string":"{Object} spec","name":"spec","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object} spec</p>"},{"type":"param","string":"{Object} data","name":"data","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Object} data</p>"},{"type":"return","string":"{boolean}","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{boolean}</p>"},{"type":"see","string":"where","local":"where","html":"<p>where</p>"},{"type":"example","string":"const spec = N.where({ a: 1, b: 2 });\nspec({ a: 1, b: 2 }); // -> true\nspec({ a: 1, b: 3 }); // -> false\nspec({ a: 1 }); // -> false","html":"<p>const spec = N.where({ a: 1, b: 2 });<br />\nspec({ a: 1, b: 2 }); // -&gt; true<br />\nspec({ a: 1, b: 3 }); // -&gt; false<br />\nspec({ a: 1 }); // -&gt; false</p>"}],"description":{"full":"<p>Takes a spec object and a test object, returs true if test object fully satisfies spec.<br />\nEach of spec object property can contain any data type and will be compared to spec with <code>N.equals</code>.</p>","summary":"<p>Takes a spec object and a test object, returs true if test object fully satisfies spec.<br />\nEach of spec object property can contain any data type and will be compared to spec with <code>N.equals</code>.</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":7,"codeStart":26,"code":"function whereEq(spec, data) {\n  const specKeys = keys(spec);\n  return every(key => equals(spec[key], data[key]), specKeys);\n}\n\nmodule.exports = curry(whereEq);","ctx":{"type":"function","name":"whereEq","string":"whereEq()"}}],[{"tags":[{"type":"since","string":"v1.0.0","html":"<p>v1.0.0</p>"},{"type":"category","string":"Array","html":"<p>Array</p>"},{"type":"param","string":"{Array} remove","name":"remove","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} remove</p>"},{"type":"param","string":"{Array} list","name":"list","description":"","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"html":"<p>{Array} list</p>"},{"type":"return","string":"{Array}","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"","html":"<p>{Array}</p>"},{"type":"example","string":"N.without([1, 2, 3], [1, 2, 3, 4, 5, 6]); // -> [4, 5, 6]\nN.without([{ a: 1 }, { b: 2 }], [{ a : 1 }, { b: 2 }, { c: 3 }, { d: 4 }]); // -> [{ c: 3 }, { d: 4 }]","html":"<p>N.without([1, 2, 3], [1, 2, 3, 4, 5, 6]); // -&gt; [4, 5, 6]<br />\nN.without([{ a: 1 }, { b: 2 }], [{ a : 1 }, { b: 2 }, { c: 3 }, { d: 4 }]); // -&gt; [{ c: 3 }, { d: 4 }]</p>"}],"description":{"full":"<p>Returns new array without values specified in the first argument</p>","summary":"<p>Returns new array without values specified in the first argument</p>","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":5,"codeStart":19,"code":"function without(remove, list) {\n  const result = [];\n\n  for (let i = 0, l = list.length; i < l; i += 1) {\n    if (!includes(list[i], remove)) {\n      result.push(list[i]);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = curry(without);","ctx":{"type":"function","name":"without","string":"without()"}}]]
