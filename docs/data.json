[{"name":"append","since":"v1.0.0","category":"Array","examples":"N.append('nier', ['hello']); // -> ['hello', 'nier']\nN.append('nier')(['who loves you?']); // ['who loves you?', 'nier']\nN.append(['nier'], ['hello']); // ['hello', ['nier']]","description":"<p>Creates new array containing the contents of the given array or array like structure,<br />\nfolowed by the given value. Note that append will create only a shallow copy of provided<br />\ndata structure.</p>","params":[{"name":"value","description":"<p>element to add at the end of array</p>","typesDescription":"<code>*</code>"},{"name":"data","description":"<p>array to add element to</p>","typesDescription":"<code>Array</code>"}]},{"name":"call","since":"v1.0.0","category":"Function","examples":"N.call(console.log, 'hello', 'nier'); // -> same as console.log('hello', 'nier')\nN.call(N.clamp(1, 10), 15); // -> same as N.clamp(1, 10, 15)\nN.call(N.has('nier'), { nier: 'hello' }); // -> same as N.has('nier', { nier: 'hello' })","description":"<p>Calls provided function (first argument) with given values (all other arguments).</p>","params":[{"name":"fn","description":"<p>function to call</p>","typesDescription":"<code>Function</code>"},{"name":"args","description":"<p>list of arguments to call function with</p>","typesDescription":"<code>*</code>"}]},{"name":"chunk","since":"v1.0.0","category":"Array","examples":"N.chunk([1, 2, 3, 4, 5], 2); // -> [[1, 2], [3, 4], [5]]\nN.chunk([1, 2], 3); // -> [[1, 2]]\nN.chunk([], 2); // -> []","description":"<p>Creates an array of elements split into groups with provided length value.<br />\nIf array can't be split evenly, the final chunk will contain the remaining elements.</p>","params":[{"name":"size","description":"<p>size of each chunk</p>","typesDescription":"<code>number</code>"},{"name":"value","description":"<p>value to process</p>","typesDescription":"<code>Array</code>"}]},{"name":"clamp","since":"v1.0.0","category":"Number","examples":"N.clamp(10, 20, 100); // -> 20\nN.clamp(-10, 20, -50); // -> -10\nN.clamp(1.5, 1.9, 1.937); // -> 1.9","description":"<p>Clamps number within provided min and max borders</p>","params":[{"name":"min","description":"<p>lower border</p>","typesDescription":"<code>number</code>"},{"name":"max","description":"<p>upper border</p>","typesDescription":"<code>number</code>"},{"name":"value","description":"<p>number to clamp</p>","typesDescription":"<code>number</code>"}]},{"name":"complement","since":"v1.0.0","category":"Function","examples":"N.negate(() => true)(); // -> false\nN.negate(() => false)(); // -> true\nconst notString = N.complement(N.is(String));\nnotString('nier'); // -> false\nnotString(1000); // -> true","description":"<p>Creates new function that returns the negated value of provided function</p>","params":[{"name":"fn","description":"<p>function to negate</p>","typesDescription":"<code>Function</code>"}]},{"name":"exports","since":"v1.0.0","category":"Function","examples":"N.compose(val => val + 1, val => val * 2)(1); // -> 1 * 2 -> 2 + 1 -> 3\nN.compose(N.trim, N.upperFirst)('  hello!'); // N.trim('  hello!') -> N.upperFirst('hello!') -> 'Hello!'","description":"<p>Performs last-to-first function composition. The last function may have any arity, the remaining functions must be unary.</p>","params":[{"name":"fns","description":"<p>functions to compose</p>","typesDescription":"...<code>Function</code>"}]},{"name":"concat","since":"v1.0.0","category":"Array","examples":"N.concat([1, 2, 3], [4, 5]); // -> [1, 2, 3, 4, 5]\nN.concat('Hello, ', 'nier!'); // -> 'Hello, nier!'","description":"<p>Concatenates two array or string values into one</p>","params":[{"name":"a","description":"<p>fitst value to concat</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"b","description":"<p>second value to concat</p>","typesDescription":"<code>Array</code>|<code>string</code>"}]},{"name":"curry","since":"v1.0.0","category":"Function","examples":"const sum = N.curry((a, b, c) => a + b + c);\nsum(1, 2, 3); // 6\nsum(1, 2)(3); // 6\nsum(1)(2)(3); // 6\nsum(1)()(2)()(3); // 6","description":"<p>Returns curried equivalent of provided function.</p>","params":[{"name":"fn","description":"<p>function to curry</p>","typesDescription":"<code>Function</code>"}]},{"name":"curryN","since":"v1.0.0","category":"Function","examples":"const sum = N.curryN(3, (...args) => args[0] + args[1] + args[2]);\nsum(1, 2, 3); // 6\nsum(1, 2)(3); // 6\nsum(1)(2)(3); // 6\nsum(1)()(2)()(3); // 6","description":"<p>Returns curried equivalent of provided function, with the specified arity.</p>","params":[{"name":"fn","description":"<p>function to curry</p>","typesDescription":"<code>Function</code>"}]},{"name":"equals","since":"v1.0.0","category":"Language","examples":"N.equals(1, 1); // -> true\nN.equals('hello', 'hello!'); // -> false\nN.equals(true, true); // -> true\nN.equals(null, undefined); // -> false\nN.equals({ a: 1 }, { a: 1 }); // -> true\nN.equals({ a: { b: 1 } }, { a: { b: 1 } }); // -> true\nN.equals({ a: { b: 1 } }, { a: { b: 2 } }); // -> false\nN.equals({ a: [1, 2, 3] }, { a: [1, 2, 3] }); // -> true\nN.equals({ a: [1, 2, 3] }, { a: [1, 2, 3, 4] }); // -> false\nN.equals([1, 2, 3], [1, 2, 3]); // -> true\nN.equals([1, 2, 3], [1, 2, 3, 4]); // -> false\nN.equals([{ id: 1 }, { id: 2 }], [{ id: 1 }, { id: 2 }]); // -> true\nN.equals([{ id: 1 }, { id: 2 }], [{ id: 1 }, { id: 3 }]); // -> false","description":"<p>Returns true if two passed values are equal.</p>","params":[{"name":"a","description":"","typesDescription":"<code>*</code>"},{"name":"b","description":"","typesDescription":"<code>*</code>"}]},{"name":"every","since":"v1.0.0","category":"Array","examples":"N.every((number) => number > 2, [1, 2, 3]); // -> false\nN.every((number) => number > 2, [2, 3, 4]); // -> true\nN.every(N.path('nier'))([{ nier: 'hello' }, { hello: true }]); // -> false","description":"<p>Returns true if all elements match the predicate, false otherwise.</p>","params":[{"name":"callback","description":"<p>predicate, will be called with each item</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"filter","since":"v1.0.0","category":"Array","examples":"N.filter((item) => item > 2)([1, 2, 3, 4]); // -> [3, 4]\nN.filter(\n  N.has('id'),\n  [{ id: 1, name: 'Nier' }, { name: 'Hello' }, { name: null }]\n); // -> [{ id: 1, name: 'Nier' }]","description":"<p>Removes item from list if it does not match the predicate.</p>","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"<p>array to filter</p>","typesDescription":"<code>Array</code>"}]},{"name":"find","since":"v1.0.0","category":"Array","examples":"N.find((val) => val > 2, [1, 2, 3, 4]); // -> 3\nN.find((val) => val > 2, [0, 1, 2]); // -> undefined\nN.find(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -> { name: 2, id: 1 }","description":"<p>Returns first element that matches the predicate. If list does not contain such element returns undefined.</p>","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"findIndex","since":"v1.0.0","category":"Array","examples":"N.findIndex((val) => val > 2, [1, 2, 3, 4]); // -> 2\nN.findIndex((val) => val > 2, [0, 1, 2]); // -> -1\nN.findIndex(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -> 1","description":"<p>Returns index of first element that matches the predicate. If list does not contain such element returns -1.</p>","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"findLast","since":"v1.0.0","category":"Array","examples":"N.findLast((val) => val > 2, [1, 2, 3, 4]); // -> 4\nN.findLast((val) => val > 2, [0, 1, 2]); // -> undefined\nN.findLast(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -> { name: 3, id: 2 }","description":"<p>Returns last element that matches the predicate. If list does not contain such element returns undefined.</p>","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"findLastIndex","since":"v1.0.0","category":"Array","examples":"N.findLastIndex((val) => val > 2, [1, 2, 3, 4]); // -> 3\nN.findLastIndex((val) => val > 2, [0, 1, 2]); // -> -1\nN.findLastIndex(N.has('id'), [{ name: 1 }, { name: 2, id: 1 }, { name: 3, id: 2 }]); // -> 2","description":"<p>Returns index of last element that matches the predicate. If list does not contain such element returns -1.</p>","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"flip","since":"v1.0.0","category":"Function","examples":"N.flip((a, b) => `${a}${b}`)('f', 'g'); // -> 'gf'\nN.flip((a, b, c) => `${a}${b}${c}`)('f', 'g', 'h'); // -> 'hgf'","description":"<p>Takes function and returs function that acts the same as received, but accepts arguments in reversed order.</p>","params":[{"name":"fn","description":"","typesDescription":"<code>Function</code>"}]},{"name":"has","since":"v1.0.0","category":"Object","examples":"N.has('a', { a: 1, b: 2 }); // -> true\nN.has('c', { a: 1, b: 2 }); // -> false\nN.has(['a', 'b'], { a: { b: 1 }, c: 2 }); // -> true\nN.has(0, ['hello', 'nier']); // -> true\nN.has(2, ['hello', 'nier']); // -> false\nN.has([0, 'a', 'b'], [{ a: { b: 2 }, c: 1 }, { c: 1 }]); // -> true\nN.has([2, 'a', 'b'], [{ a: { b: 2 }, c: 1 }, { c: 1 }]); // -> false\nN.has(['a', 0, 'b'], { a: [{ b: 1 }, { c: 2 }], d: 3 }); // -> true\nN.has(['a', 2, 'b'], { a: [{ b: 1 }, { c: 2 }], d: 3 }); // -> false","description":"<p>Returns true if an object or an array has the provided path, false otherwise</p>","params":[{"name":"path","description":"<p>path to tests</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"object","description":"","typesDescription":"<code>Array</code>|<code>Object</code>"}]},{"name":"head","since":"v1.0.0","category":"Array","examples":"N.head([1, 2, 3]); // -> 1\nN.head('nier'); // -> 'n'\nN.head({ 0: 'first', 1: 'second', length: 2 }); // -> first","description":"<p>Returns first item of array like collection</p>","params":[{"name":"collection","description":"","typesDescription":"<code>Array</code>"}]},{"name":"includes","since":"v1.0.0","category":"Array","examples":"N.includes(1, [1, 2, 3]); // -> true\nN.includes({ a: 1 }, [{ a: 1 }, { a: 2 }, { a: 3 }]); // -> true","description":"<p>Returns true if provided value is equal to at least one element of the array.</p>","params":[{"name":"value","description":"","typesDescription":"<code>*</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"join","since":"v1.0.0","category":"Array","examples":"N.join('|', [1, 2, 3]); // -> '1|2|3'\nN.join(' ', ['hello','nier']); // -> 'hello nier'","description":"<p>Unites all items of the list in a string with separator between items</p>","params":[{"name":"separator","description":"","typesDescription":"<code>string</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"keys","since":"v1.0.0","category":"Object","examples":"N.keys({}); // -> []\nN.keys({ a: 1, b: 2, c: 3 }); // -> ['a', 'b', 'c']","description":"<p>Returns an array containing names of enumerable own properties of the provided object.</p>","params":[{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"map","since":"v1.0.0","category":"Array","examples":"N.map((val) => val * 2, [1, 2, 3]); // -> [2, 4, 6]\nN.map((name) => `Hello, ${name}!`, ['nier', 'you']); // -> ['Hello, nier!', 'Hello, you!']","description":"<p>Creates a new array with the results of calling a provided function on every element in the calling array.</p>","params":[{"name":"callback","description":"<p>function that will be called on each element</p>","typesDescription":"<a href=\"fn.html\">fn</a>"},{"name":"data","description":"","typesDescription":"<code>Array</code>"}]},{"name":"max","since":"v1.0.0","category":"Number","examples":"N.max(1, 2); // -> 2\nN.max('a', 'b'); // -> 'b'","description":"<p>Returns the max of its two arguments.</p>","params":[{"name":"a","description":"","typesDescription":"<code>*</code>"},{"name":"b","description":"","typesDescription":"<code>*</code>"}]},{"name":"min","since":"v1.0.0","category":"Number","examples":"N.min(1, 2); // -> 1\nN.min('a', 'b'); // -> 'a'","description":"<p>Returns the min of its two arguments.</p>","params":[{"name":"a","description":"","typesDescription":"<code>*</code>"},{"name":"b","description":"","typesDescription":"<code>*</code>"}]},{"name":"none","since":"v1.0.0","category":"Array","examples":"N.none((number) => number > 2, [1, 2, 3]); // -> false\nN.none((number) => number < 2, [2, 3, 4]); // -> true\nN.none(N.path('nier'))([{ nier: 'hello' }, { hello: true }]); // -> false","description":"<p>Returns true if no elements match the predicate, false otherwise.</p>","params":[{"name":"callback","description":"<p>predicate, will be called with each item</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"normalize","since":"v1.0.0","category":"Array","examples":"N.normalize(\n  'id',\n  [{ id: 1, name: 'name-1' }, { id: 2, name: 'name-2' }, { id: 3, name: 'name-3' }]\n);\n\n// Will result into:\n// {\n//   '1': { id: 1, name: 'name-1' },\n//   '2': { id: 2, name: 'name-2' },\n//   '3': { id: 2, name: 'name-3' },\n// }","description":"<p>Turns array of objects into normalized object structure based on provided property.</p>","params":[{"name":"prop","description":"<p>property that will be used to create object keys</p>","typesDescription":"<code>string</code>"},{"name":"list","description":"<p>array of objects</p>","typesDescription":"<code>Array</code>"}]},{"name":"partial","since":"v1.0.0","category":"Function","examples":"N.partial((a, b) => a + b, [1])(2); // -> 3\nN.partial(greet, name) => `${greet} ${name}`, ['hello'])('nier'); // -> 'hello nier'","description":"<p>Binds function to specified argument list.</p>","params":[{"name":"fn","description":"<p>function that should be binded</p>","typesDescription":"<code>Function</code>"},{"name":"predefined","description":"<p>list of arguments that function should be binded to</p>","typesDescription":"<code>Array</code>"}]},{"name":"partialRight","since":"v1.0.0","category":"Function","examples":"N.partialRight((a, b) => a / b, [3])(6); // -> 2\nN.partial(greet, name) => `${greet} ${name}`, ['nier'])('hello'); // -> 'hello nier'","description":"<p>Binds function to specified argument list.</p>","params":[{"name":"fn","description":"<p>function that should be binded</p>","typesDescription":"<code>Function</code>"},{"name":"predefined","description":"<p>list of arguments that function should be binded to</p>","typesDescription":"<code>Array</code>"}]},{"name":"path","since":"v1.0.0","category":"Object","examples":"N.path('a', { a: 1, b: 2 }); // -> 1\nN.path(['a', 'b'], { a: { b: 1 }, c: 3 }); // -> 1\nN.path(['a', 'b', 'c'], { a: 1 }); // -> undefined","description":"<p>Returns value at provided object path or undefined if path does not exist</p>","params":[{"name":"pathTo","description":"<p>path to retrieve</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"curry","description":"","params":[]},{"name":"exports","since":"v1.0.0","category":"Function","examples":"N.pipe(val => val + 1, val => val * 2)(1); // -> 1 + 1 -> 2 * 2 -> 4\nN.pipe(N.trim, N.upperFirst)('hello!  '); // N.upperFirst('hello!  ') -> N.trim('Hello!  ') -> 'Hello!'","description":"<p>Performs first-to-last function composition. The first function may have any arity, the remaining functions must be unary.</p>","params":[{"name":"fns","description":"<p>functions to compose</p>","typesDescription":"...<code>Function</code>"}]},{"name":"prepend","since":"v1.0.0","category":"Array","examples":"N.prepend('nier', ['hello']); // -> ['nier', 'hello']\nN.prepend('who loves you?')(['nier']); // ['who loves you?', 'nier']\nN.prepend(['nier'], ['hello']); // [['nier'], 'hello']","description":"<p>Creates new array containing the contents of the given array or array like structure,<br />\nwith the give value at the front, folowed by the content of the array.<br />\nNote that prepend will create only a shallow copy of provided data structure.</p>","params":[{"name":"value","description":"<p>element to add at the begining of array</p>","typesDescription":"<code>*</code>"},{"name":"data","description":"<p>array to add element to</p>","typesDescription":"<code>Array</code>"}]},{"name":"reduce","since":"v1.0.0","category":"Array","examples":"N.reduce((acc, item) => acc + item, 10, [1, 2, 3]); // -> 16","description":"<p>Applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.</p>","params":[{"name":"callback","description":"<p>function that will be called with each item</p>","typesDescription":"<code>Function</code>"},{"name":"initialValue","description":"<p>initial value that will be used as accumulator</p>","typesDescription":"<code>*</code>"},{"name":"data","description":"","typesDescription":"<code>Array</code>"}]},{"name":"reject","since":"v1.0.0","category":"Array","examples":"N.reject((item) => item > 2)([1, 2, 3, 4]); // -> [1, 2]\nN.reject(\n  N.whereEq({ id: null }),\n  [{ id: null, name: 1 }, { id: 'nier', name: 2 }, { id: null, name: 3 }]\n); // -> [{ id: 'nier', name: 2 }]","description":"<p>Removes item from list if it matches the predicate.</p>","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"<p>array to filter</p>","typesDescription":"<code>Array</code>"}]},{"name":"reverse","since":"v1.0.0","category":"Array","examples":"N.reverse([1, 2, 3]); // -> [3, 2, 1]\nN.reverse('nier'); // -> 'rein'","description":"<p>Returns new collection with reversed order.</p>","params":[{"name":"collection","description":"<p>data to reverse</p>","typesDescription":"<code>Array</code>|<code>string</code>"}]},{"name":"set","since":"v1.0.0","category":"Object","examples":"N.set('prop', 'value', { a: 1 }); // -> { a: 1, prop: 'value' }\nN.set('prop', 'value', { prop: 1 }); // -> { prop: 'value' }\nN.set(['nested', 'prop'], 'value', { a: 1 }); // -> { a: 1, nested: { prop: 'value' } }\nN.set(['nested', 'prop'], 'value', { nested: { prop: 1 } }); // -> { nested: { prop: 'value' } }","description":"<p>Creates shallow copy of object and cretes or overrides value at provided path.<br />\nCreates shallow copies for all nested object paths.</p>","params":[{"name":"path","description":"<p>path to property, where value should be set</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"value","description":"","typesDescription":"<code>*</code>"},{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"setWith","since":"v1.0.0","category":"Object","examples":"N.setWith('a', (val) => val + 1, { a: 1 }); // -> { a: 2 }\nN.setWith(['a', 'b'], (val) => val + 1, { a: { b: 1 } }); // -> { a: { b: 2 } }\nN.setWith('a', (val) => val === undefined, { b: 1 }); // -> { a: true, b: 1 }","description":"<p>Works exactly like set function but instead of accepting actual value,<br />\nsetWith accept callback that will receive current value of the object at path,<br />\nthe result of calling callback with value will be set to object path.<br />\nIf object does not have value at provided path callback will receive undefined.</p>","params":[{"name":"pathToSet","description":"<p>path to property, where value should be set</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"callback","description":"","typesDescription":"<code>Function</code>"},{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"slice","since":"v1.0.0","category":"Array","examples":"N.slice(0, 2, [0, 1, 2, 3, 4]); // -> [0, 1]\nN.slice(0, -1, [0, 1, 2, 3, 4]); // -> [0, 1, 2, 3]\nN.slice(2, -2, [0, 1, 2, 3, 4]); // -> [2]\n * N.slice(0, 2, 'nier'); // -> 'ni'","description":"<p>Returns shallow copy of collection part selected from the <code>begin</code> (inclusive) to <code>end</code> (exclusive).</p>","params":[{"name":"begin","description":"<p>start index</p>","typesDescription":"<code>number</code>"},{"name":"end","description":"<p>slice end</p>","typesDescription":"<code>number</code>"},{"name":"collection","description":"","typesDescription":"<code>Array</code>|<code>string</code>"}]},{"name":"some","since":"v1.0.0","category":"Array","examples":"N.some((number) => number > 2, [1, 2, 3]); // -> true\nN.some((number) => number < 2, [2, 3, 4]); // -> false\nN.some(N.path('nier'))([{ nier: 'hello' }, { hello: true }]); // -> true","description":"<p>Returns true if any element match the predicate, false otherwise.</p>","params":[{"name":"callback","description":"<p>predicate, will be called with each item</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"toLowerCase","since":"v1.0.0","category":"String","examples":"N.toLowerCase('Hello!'); // -> 'hello!'\nN.toLowerCase('HELLO!'); // -> 'hello!'\nN.toLowerCase('hello!'); // -> 'hello!'","description":"<p>Convers all string characters to lower case.</p>","params":[{"name":"str","description":"","typesDescription":"<code>string</code>"}]},{"name":"toUpperCase","since":"v1.0.0","category":"String","examples":"N.toUpperCase('Hello!'); // -> 'Hello!'\nN.toUpperCase('HELLO!'); // -> 'Hello!'\nN.toUpperCase('hello!'); // -> 'Hello!'","description":"<p>Convers all string characters to upper case.</p>","params":[{"name":"str","description":"","typesDescription":"<code>string</code>"}]},{"name":"type","since":"v1.0.0","category":"Language","examples":"N.type(null); // -> 'Null'\nN.type(undefined); // -> 'Undefined'\nN.type('hello'); // -> 'String'\nN.type(1); // -> 'Number'\nN.type({ a: 1 }); // -> 'Object'\nN.type([1, 2]); // -> 'Array'\nN.type(f => f); // -> 'Function'\nN.type(/a/g); // -> 'RegExp'","description":"<p>Returns single word description of the value type</p>","params":[{"name":"value","description":"","typesDescription":"<code>*</code>"}]},{"name":"unnest","since":"v1.0.0","category":"Array","examples":"N.unnest([[1, 2], [3], [4]]); // -> [1, 2, 3, 4]\nN.unnest([1, [2], [3], [[4]]]); // -> [1, 2, 3, [4]]\nN.unnest([1, 2, 3, 4]); // -> [1, 2, 3, 4]","description":"<p>Removes one level of nesting from the list</p>","params":[{"name":"list","description":"<p>data to unnest</p>","typesDescription":"<code>Array</code>"}]},{"name":"unset","since":"v1.0.0","category":"Object","examples":"N.unset('prop', { a: 1, prop: 2 }); // -> { a: 1 }\nN.unset('prop', { prop: 1 }); // -> {}\nN.unset(['nested', 'prop'], 'value', { a: 1, nested: { prop: 'value' } }); // -> { a: 1, nested: {} }\nN.unset('nested', 'value', { a: 1, nested: { prop: 'value' } }); // -> { a: 1 }","description":"<p>Creates shallow copy of object and deletes value at provided path if it exists.<br />\nCreates shallow copies for all nested object referenced in path if path exists.</p>","params":[{"name":"path","description":"<p>path to property that should be removed</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"value","description":"","typesDescription":"<code>*</code>"},{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"update","since":"v1.0.0","category":"Array","examples":"N.update(0, 'hello', ['hi', 'nier']); // -> ['hello', 'nier']\nN.update(5, 'hello', ['hi', 'nier']); // -> ['hi', 'nier']\nN.update(-1, 'nier', ['hi', 'there', 'you']); // -> ['hi', 'there', 'nier']","description":"<p>Creates new copy of the array with the element at index replaced with provided value.<br />\nIf array does not have value at provided index, it won't be set and the original array will be returned.<br />\nNote that update will only create shallow copy of the array.</p>","params":[{"name":"index","description":"<p>position to update</p>","typesDescription":"<code>number</code>"},{"name":"value","description":"<p>value to set at position</p>","typesDescription":"<code>*</code>"},{"name":"array","description":"","typesDescription":"<code>Array</code>"}]},{"name":"upperFirst","since":"v1.0.0","category":"String","examples":"N.upperFirst('hello!'); // -> 'Hello!'\nN.upperFirst('Hello!'); // -> 'Hello!'\nN.upperFirst('hELLO!'); // -> 'HELLO!'","description":"<p>Convers first character of a string to upper case.</p>","params":[{"name":"str","description":"","typesDescription":"<code>string</code>"}]},{"name":"values","since":"v1.0.0","category":"Object","examples":"N.values({}); // -> []\nN.values({ a: 1, b: 2, c: 3 }); // -> [1, 2, 3]","description":"<p>Returns an array of enumerable own properties of the provided object.</p>","params":[{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"where","since":"v1.0.0","category":"Object","examples":"const spec = N.where({ a: (val) => val > 1, b: (val) => val > 2 });\nspec({ a: 1, b: 2 }); // -> false\nspec({ a: 2, b: 3 }); // -> true\nspec({ a: 4 }); // -> false","description":"<p>Takes a spec object and a test object, returs true if test object fully satisfies spec.<br />\nEach of spec object property must be a function, otherwise where will return false.</p>","params":[{"name":"spec","description":"","typesDescription":"<code>Object</code>"},{"name":"data","description":"","typesDescription":"<code>Object</code>"}]},{"name":"whereEq","since":"v1.0.0","category":"Object","examples":"const spec = N.where({ a: 1, b: 2 });\nspec({ a: 1, b: 2 }); // -> true\nspec({ a: 1, b: 3 }); // -> false\nspec({ a: 1 }); // -> false","description":"<p>Takes a spec object and a test object, returs true if test object fully satisfies spec.<br />\nEach of spec object property can contain any data type and will be compared to spec with <code>N.equals</code>.</p>","params":[{"name":"spec","description":"","typesDescription":"<code>Object</code>"},{"name":"data","description":"","typesDescription":"<code>Object</code>"}]},{"name":"without","since":"v1.0.0","category":"Array","examples":"N.without([1, 2, 3], [1, 2, 3, 4, 5, 6]); // -> [4, 5, 6]\nN.without([{ a: 1 }, { b: 2 }], [{ a : 1 }, { b: 2 }, { c: 3 }, { d: 4 }]); // -> [{ c: 3 }, { d: 4 }]","description":"<p>Returns new array without values specified in the first argument</p>","params":[{"name":"remove","description":"","typesDescription":"<code>Array</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]}]
