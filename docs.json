{"version":"1.0.2","docs":[{"name":"__","examples":"<span class=\"hljs-keyword\">const</span> call = N.call(N.__, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>);\ncall(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a + b); <span class=\"hljs-comment\">// -&gt; 3</span>","description":"Placeholder","params":[]},{"name":"amount","since":"v1.0.0","see":"withIndex","category":"Array","examples":"N.amount(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> number &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; 1</span>\nN.amount(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> number === <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// -&gt; 3</span>\nN.amount(N.equals({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }), [{ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span> }]); <span class=\"hljs-comment\">// -&gt; 2</span>","description":"Returns amount of array elements that matched the predicate.","params":[{"name":"callback","description":"<p>predicate, will be called with each item</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"append","since":"v1.0.0","see":"prepend, concat","category":"Array","examples":"N.append(<span class=\"hljs-string\">'nier'</span>, [<span class=\"hljs-string\">'hello'</span>]); <span class=\"hljs-comment\">// -&gt; ['hello', 'nier']</span>\nN.append(<span class=\"hljs-string\">'nier'</span>)([<span class=\"hljs-string\">'who loves you?'</span>]); <span class=\"hljs-comment\">// ['who loves you?', 'nier']</span>\nN.append([<span class=\"hljs-string\">'nier'</span>], [<span class=\"hljs-string\">'hello'</span>]); <span class=\"hljs-comment\">// ['hello', ['nier']]</span>","description":"Creates new array containing the contents of the given array or array like structure,\nfolowed by the given value. Note that all array like data structures (e.g. strings, arguments)\nwill be automaticly transformed to array.","params":[{"name":"value","description":"<p>element to add at the end of array</p>","typesDescription":"<code>*</code>"},{"name":"data","description":"<p>array to add element to</p>","typesDescription":"<code>Array</code>"}]},{"name":"call","since":"v1.0.0","category":"Function","examples":"N.call(<span class=\"hljs-built_in\">console</span>.log, <span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'nier'</span>); <span class=\"hljs-comment\">// -&gt; same as console.log('hello', 'nier')</span>\nN.call(N.clamp(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">10</span>), <span class=\"hljs-number\">15</span>); <span class=\"hljs-comment\">// -&gt; same as N.clamp(1, 10, 15)</span>\nN.call(N.has(<span class=\"hljs-string\">'nier'</span>), { <span class=\"hljs-attr\">nier</span>: <span class=\"hljs-string\">'hello'</span> }); <span class=\"hljs-comment\">// -&gt; same as N.has('nier', { nier: 'hello' })</span>","description":"Calls provided function (first argument) with given values (all other arguments).","params":[{"name":"fn","description":"<p>function to call</p>","typesDescription":"<code>Function</code>"},{"name":"args","description":"<p>list of arguments to call function with</p>","typesDescription":"<code>*</code>"}]},{"name":"chunk","since":"v1.0.0","alias":"splitAt","category":"Array","examples":"N.chunk([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>], <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// -&gt; [[1, 2], [3, 4], [5]]</span>\nN.chunk([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// -&gt; [[1, 2]]</span>\nN.chunk([], <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// -&gt; []</span>","description":"Creates an array of elements split into groups with provided length value.\nIf array can't be split evenly, the final chunk will contain the remaining elements.","params":[{"name":"size","description":"<p>size of each chunk</p>","typesDescription":"<code>number</code>"},{"name":"value","description":"<p>value to process</p>","typesDescription":"<code>Array</code>"}]},{"name":"clamp","since":"v1.0.0","category":"Number","examples":"N.clamp(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">100</span>); <span class=\"hljs-comment\">// -&gt; 20</span>\nN.clamp(<span class=\"hljs-number\">-10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">-50</span>); <span class=\"hljs-comment\">// -&gt; -10</span>\nN.clamp(<span class=\"hljs-number\">1.5</span>, <span class=\"hljs-number\">1.9</span>, <span class=\"hljs-number\">1.937</span>); <span class=\"hljs-comment\">// -&gt; 1.9</span>","description":"Clamps number within provided min and max borders","params":[{"name":"min","description":"<p>lower border</p>","typesDescription":"<code>number</code>"},{"name":"max","description":"<p>upper border</p>","typesDescription":"<code>number</code>"},{"name":"value","description":"<p>number to clamp</p>","typesDescription":"<code>number</code>"}]},{"name":"complement","since":"v1.0.0","category":"Function","examples":"N.negate(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-literal\">true</span>)(); <span class=\"hljs-comment\">// -&gt; false</span>\nN.negate(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> <span class=\"hljs-literal\">false</span>)(); <span class=\"hljs-comment\">// -&gt; true</span>\n<span class=\"hljs-keyword\">const</span> notString = N.complement(N.is(<span class=\"hljs-built_in\">String</span>));\nnotString(<span class=\"hljs-string\">'nier'</span>); <span class=\"hljs-comment\">// -&gt; false</span>\nnotString(<span class=\"hljs-number\">1000</span>); <span class=\"hljs-comment\">// -&gt; true</span>","description":"Creates new function that returns the negated value of provided function","params":[{"name":"fn","description":"<p>function to negate</p>","typesDescription":"<code>Function</code>"}]},{"name":"compose","since":"v1.0.0","category":"Function","examples":"N.compose(<span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> val + <span class=\"hljs-number\">1</span>, val =&gt; val * <span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// -&gt; 1 * 2 -&gt; 2 + 1 -&gt; 3</span>\nN.compose(N.trim, N.upperFirst)(<span class=\"hljs-string\">'  hello!'</span>); <span class=\"hljs-comment\">// N.trim('  hello!') -&gt; N.upperFirst('hello!') -&gt; 'Hello!'</span>","description":"Performs last-to-first function composition. The last function may have any arity, the remaining functions must be unary.","params":[{"name":"fns","description":"<p>functions to compose</p>","typesDescription":"...<code>Function</code>"}]},{"name":"concat","since":"v1.0.0","category":"Array","examples":"N.concat([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3, 4, 5]</span>\nN.concat(<span class=\"hljs-string\">'Hello, '</span>, <span class=\"hljs-string\">'nier!'</span>); <span class=\"hljs-comment\">// -&gt; 'Hello, nier!'</span>","description":"Concatenates two array or string values into one","params":[{"name":"a","description":"<p>fitst value to concat</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"b","description":"<p>second value to concat</p>","typesDescription":"<code>Array</code>|<code>string</code>"}]},{"name":"curry","since":"v1.0.0","see":"curryN","category":"Function","examples":"<span class=\"hljs-keyword\">const</span> sum = N.curry(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b, c</span>) =&gt;</span> a + b + c);\nsum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 6</span>\nsum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 6</span>\nsum(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 6</span>\nsum(<span class=\"hljs-number\">1</span>)()(<span class=\"hljs-number\">2</span>)()(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 6</span>","description":"Returns curried equivalent of provided function.","params":[{"name":"fn","description":"<p>function to curry</p>","typesDescription":"<code>Function</code>"}]},{"name":"curryN","since":"v1.0.0","see":"curry","category":"Function","examples":"<span class=\"hljs-keyword\">const</span> sum = N.curryN(<span class=\"hljs-number\">3</span>, (...args) =&gt; args[<span class=\"hljs-number\">0</span>] + args[<span class=\"hljs-number\">1</span>] + args[<span class=\"hljs-number\">2</span>]);\nsum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 6</span>\nsum(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 6</span>\nsum(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 6</span>\nsum(<span class=\"hljs-number\">1</span>)()(<span class=\"hljs-number\">2</span>)()(<span class=\"hljs-number\">3</span>); <span class=\"hljs-comment\">// 6</span>","description":"Returns curried equivalent of provided function, with the specified arity.","params":[{"name":"fn","description":"<p>function to curry</p>","typesDescription":"<code>Function</code>"}]},{"name":"equals","since":"v1.0.0","category":"Language","examples":"N.equals(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// -&gt; true</span>\nN.equals(<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'hello!'</span>); <span class=\"hljs-comment\">// -&gt; false</span>\nN.equals(<span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">true</span>); <span class=\"hljs-comment\">// -&gt; true</span>\nN.equals(<span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// -&gt; false</span>\nN.equals({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// -&gt; true</span>\nN.equals({ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> } }, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> } }); <span class=\"hljs-comment\">// -&gt; true</span>\nN.equals({ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> } }, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> } }); <span class=\"hljs-comment\">// -&gt; false</span>\nN.equals({ <span class=\"hljs-attr\">a</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>] }, { <span class=\"hljs-attr\">a</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>] }); <span class=\"hljs-comment\">// -&gt; true</span>\nN.equals({ <span class=\"hljs-attr\">a</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>] }, { <span class=\"hljs-attr\">a</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>] }); <span class=\"hljs-comment\">// -&gt; false</span>\nN.equals([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; true</span>\nN.equals([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; false</span>\nN.equals([{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span> }], [{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span> }]); <span class=\"hljs-comment\">// -&gt; true</span>\nN.equals([{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span> }], [{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span> }]); <span class=\"hljs-comment\">// -&gt; false</span>","description":"Returns true if two passed values are equal.","params":[{"name":"a","description":"","typesDescription":"<code>*</code>"},{"name":"b","description":"","typesDescription":"<code>*</code>"}]},{"name":"every","since":"v1.0.0","see":"some, none","alias":"all","category":"Array","examples":"N.every(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> number &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; false</span>\nN.every(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> number &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; true</span>\nN.every(N.path(<span class=\"hljs-string\">'nier'</span>))([{ <span class=\"hljs-attr\">nier</span>: <span class=\"hljs-string\">'hello'</span> }, { <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-literal\">true</span> }]); <span class=\"hljs-comment\">// -&gt; false</span>","description":"Returns true if all elements match the predicate, false otherwise.","params":[{"name":"callback","description":"<p>predicate, will be called with each item</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"fill","since":"v1.0.0","see":"fillWith","category":"Array","examples":"N.fill(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'hello'</span>); <span class=\"hljs-comment\">// -&gt; ['hello', 'hello', 'hello']</span>\nN.fill(<span class=\"hljs-number\">2</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// -&gt; [{ a: 1 }, { a: 1 }]</span>","description":"Creates new array with provided length and fills it with provided value.\nNote that if you provide object as an element that should fill the array,\nit won't be cloned and each item in the array will only have a reference to\nthe initial object.","params":[{"name":"length","description":"<p>length of the array that should be filled</p>","typesDescription":"<code>number</code>"},{"name":"element","description":"<p>element that should be used as each item in the array</p>","typesDescription":"<code>*</code>"}]},{"name":"fillWith","since":"v1.0.0","see":"fill","category":"Array","examples":"N.fillWith(<span class=\"hljs-number\">3</span>, (index) =&gt; index); <span class=\"hljs-comment\">// -&gt; [0, 1, 2]</span>\nN.fillWith(<span class=\"hljs-number\">3</span>, (index) =&gt; <span class=\"hljs-string\">`hello-<span class=\"hljs-subst\">${index}</span>`</span>); <span class=\"hljs-comment\">// -&gt; ['hello-0', 'hello-1', 'hello-2']</span>\nN.fillWith(<span class=\"hljs-number\">2</span>, (index) =&gt; ({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-attr\">b</span>: index })); <span class=\"hljs-comment\">// -&gt; [{ a: 'hello', b: 0 }, { a: 'hello', b: 1 }]</span>","description":"Creates new array with provided length and fills it with the rusult of calling\nprovided callback function with item index.","params":[{"name":"length","description":"<p>length of the array that should be filled</p>","typesDescription":"<code>number</code>"},{"name":"callback","description":"<p>function that will produce item which will be added to array</p>","typesDescription":"<code>Function</code>"}]},{"name":"filter","since":"v1.0.0","see":"reject, withIndex","category":"Array","examples":"N.filter(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> item &gt; <span class=\"hljs-number\">2</span>)([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; [3, 4]</span>\nN.filter(\n  N.has(<span class=\"hljs-string\">'id'</span>),\n  [{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Nier'</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Hello'</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-literal\">null</span> }]\n); <span class=\"hljs-comment\">// -&gt; [{ id: 1, name: 'Nier' }]</span>","description":"Removes item from list if it does not match the predicate.","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"<p>array to filter</p>","typesDescription":"<code>Array</code>"}]},{"name":"find","since":"v1.0.0","see":"findLast, findIndex, findLastIndex, withIndex","category":"Array","examples":"N.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; 3</span>\nN.find(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// -&gt; undefined</span>\nN.find(N.has(<span class=\"hljs-string\">'id'</span>), [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span> }]); <span class=\"hljs-comment\">// -&gt; { name: 2, id: 1 }</span>","description":"Returns first element that matches the predicate. If list does not contain such element returns undefined.","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"findIndex","since":"v1.0.0","see":"find, findLast, findLastIndex, withIndex","category":"Array","examples":"N.findIndex(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; 2</span>\nN.findIndex(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// -&gt; -1</span>\nN.findIndex(N.has(<span class=\"hljs-string\">'id'</span>), [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span> }]); <span class=\"hljs-comment\">// -&gt; 1</span>","description":"Returns index of first element that matches the predicate. If list does not contain such element returns -1.","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"findLast","since":"v1.0.0","see":"find, findIndex, findLastIndex, withIndex","category":"Array","examples":"N.findLast(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; 4</span>\nN.findLast(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// -&gt; undefined</span>\nN.findLast(N.has(<span class=\"hljs-string\">'id'</span>), [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span> }]); <span class=\"hljs-comment\">// -&gt; { name: 3, id: 2 }</span>","description":"Returns last element that matches the predicate. If list does not contain such element returns undefined.","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"findLastIndex","since":"v1.0.0","see":"find, findLast, findLastIndex, withIndex","category":"Array","examples":"N.findLastIndex(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; 3</span>\nN.findLastIndex(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// -&gt; -1</span>\nN.findLastIndex(N.has(<span class=\"hljs-string\">'id'</span>), [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span> }]); <span class=\"hljs-comment\">// -&gt; 2</span>","description":"Returns index of last element that matches the predicate. If list does not contain such element returns -1.","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"flatten","since":"v1.0.0","see":"unnest","category":"Array","examples":"N.flatten([<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>], <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3]</span>\nN.flatten([[[[[<span class=\"hljs-number\">1</span>], <span class=\"hljs-number\">2</span>]]], [<span class=\"hljs-number\">3</span>], <span class=\"hljs-number\">4</span>, [<span class=\"hljs-number\">5</span>, [<span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]]]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3, 4, 5, 6, 7]</span>\nN.flatten([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3]</span>","description":"Recursively removes nesting from array.","params":[{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"flip","since":"v1.0.0","category":"Function","examples":"N.flip(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${a}</span><span class=\"hljs-subst\">${b}</span>`</span>)(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'g'</span>); <span class=\"hljs-comment\">// -&gt; 'gf'</span>\nN.flip(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b, c</span>) =&gt;</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${a}</span><span class=\"hljs-subst\">${b}</span><span class=\"hljs-subst\">${c}</span>`</span>)(<span class=\"hljs-string\">'f'</span>, <span class=\"hljs-string\">'g'</span>, <span class=\"hljs-string\">'h'</span>); <span class=\"hljs-comment\">// -&gt; 'hgf'</span>","description":"Takes function and returs function that acts the same as received, but accepts arguments in reversed order.","params":[{"name":"fn","description":"","typesDescription":"<code>Function</code>"}]},{"name":"has","since":"v1.0.0","see":"path, where, whereEq","category":"Object","examples":"N.has(<span class=\"hljs-string\">'a'</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }); <span class=\"hljs-comment\">// -&gt; true</span>\nN.has(<span class=\"hljs-string\">'c'</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }); <span class=\"hljs-comment\">// -&gt; false</span>\nN.has([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> }, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">2</span> }); <span class=\"hljs-comment\">// -&gt; true</span>\nN.has(<span class=\"hljs-number\">0</span>, [<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'nier'</span>]); <span class=\"hljs-comment\">// -&gt; true</span>\nN.has(<span class=\"hljs-number\">2</span>, [<span class=\"hljs-string\">'hello'</span>, <span class=\"hljs-string\">'nier'</span>]); <span class=\"hljs-comment\">// -&gt; false</span>\nN.has([<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], [{ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">1</span> }]); <span class=\"hljs-comment\">// -&gt; true</span>\nN.has([<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], [{ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">1</span> }]); <span class=\"hljs-comment\">// -&gt; false</span>\nN.has([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'b'</span>], { <span class=\"hljs-attr\">a</span>: [{ <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">2</span> }], <span class=\"hljs-attr\">d</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; true</span>\nN.has([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'b'</span>], { <span class=\"hljs-attr\">a</span>: [{ <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">2</span> }], <span class=\"hljs-attr\">d</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; false</span>","description":"Returns true if an object or an array has the provided path, false otherwise","params":[{"name":"path","description":"<p>path to tests</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"object","description":"","typesDescription":"<code>Array</code>|<code>Object</code>"}]},{"name":"head","since":"v1.0.0","alias":"first","category":"Array","examples":"N.head([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; 1</span>\nN.head(<span class=\"hljs-string\">'nier'</span>); <span class=\"hljs-comment\">// -&gt; 'n'</span>\nN.head({ <span class=\"hljs-number\">0</span>: <span class=\"hljs-string\">'first'</span>, <span class=\"hljs-number\">1</span>: <span class=\"hljs-string\">'second'</span>, <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">2</span> }); <span class=\"hljs-comment\">// -&gt; first</span>","description":"Returns first item of array like collection","params":[{"name":"collection","description":"","typesDescription":"<code>Array</code>"}]},{"name":"includes","since":"v1.0.0","see":"some, every","alias":"contains","category":"Array","examples":"N.includes(<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; true</span>\nN.includes({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }, [{ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span> }, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">3</span> }]); <span class=\"hljs-comment\">// -&gt; true</span>\nN.includes(<span class=\"hljs-string\">'Hello'</span>, <span class=\"hljs-string\">'Hello, nier!'</span>); <span class=\"hljs-comment\">// -&gt; true</span>\nN.includes(<span class=\"hljs-string\">'i am not included'</span>, <span class=\"hljs-string\">'not here'</span>); <span class=\"hljs-comment\">// -&gt; false</span>","description":"Returns true if provided value is contained in array or string.","params":[{"name":"value","description":"","typesDescription":"<code>*</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>|<code>string</code>"}]},{"name":"join","since":"v1.0.0","category":"Array","examples":"N.join(<span class=\"hljs-string\">'|'</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; '1|2|3'</span>\nN.join(<span class=\"hljs-string\">' '</span>, [<span class=\"hljs-string\">'hello'</span>,<span class=\"hljs-string\">'nier'</span>]); <span class=\"hljs-comment\">// -&gt; 'hello nier'</span>","description":"Unites all items of the list in a string with separator between items","params":[{"name":"separator","description":"","typesDescription":"<code>string</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"keys","since":"v1.0.0","see":"values","category":"Object","examples":"N.keys({}); <span class=\"hljs-comment\">// -&gt; []</span>\nN.keys({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; ['a', 'b', 'c']</span>","description":"Returns an array containing names of enumerable own properties of the provided object.","params":[{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"map","since":"v1.0.0","see":"withIndex","category":"Array","examples":"N.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val * <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; [2, 4, 6]</span>\nN.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =&gt;</span> <span class=\"hljs-string\">`Hello, <span class=\"hljs-subst\">${name}</span>!`</span>, [<span class=\"hljs-string\">'nier'</span>, <span class=\"hljs-string\">'you'</span>]); <span class=\"hljs-comment\">// -&gt; ['Hello, nier!', 'Hello, you!']</span>","description":"Creates a new array with the results of calling a provided function on every element in the calling array.","params":[{"name":"callback","description":"<p>function that will be called on each element</p>","typesDescription":"<a href=\"fn.html\">fn</a>"},{"name":"data","description":"","typesDescription":"<code>Array</code>"}]},{"name":"max","since":"v1.0.0","see":"min","category":"Number","examples":"N.max(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// -&gt; 2</span>\nN.max(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>); <span class=\"hljs-comment\">// -&gt; 'b'</span>","description":"Returns the max of its two arguments.","params":[{"name":"a","description":"","typesDescription":"<code>*</code>"},{"name":"b","description":"","typesDescription":"<code>*</code>"}]},{"name":"merge","since":"v1.0.0","alias":"assign","category":"Object","examples":"N.merge({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }); <span class=\"hljs-comment\">// -&gt; { a: 1, b: 2 }</span>\nN.merge({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span> }, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span> }); <span class=\"hljs-comment\">// -&gt; { a: 2, b: 3 }</span>","description":"Creates new object with properties of the first object combined with properties of the second object.\nIf a key exists in both objects, value from the second object will be assigned.","params":[{"name":"a","description":"<p>first object</p>","typesDescription":"<code>Object</code>"},{"name":"b","description":"<p>second object</p>","typesDescription":"<code>Object</code>"}]},{"name":"min","since":"v1.0.0","see":"max","category":"Number","examples":"N.min(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// -&gt; 1</span>\nN.min(<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>); <span class=\"hljs-comment\">// -&gt; 'a'</span>","description":"Returns the min of its two arguments.","params":[{"name":"a","description":"","typesDescription":"<code>*</code>"},{"name":"b","description":"","typesDescription":"<code>*</code>"}]},{"name":"none","since":"v1.0.0","see":"some, every, withIndex","category":"Array","examples":"N.none(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> number &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; false</span>\nN.none(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> number &lt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; true</span>\nN.none(N.path(<span class=\"hljs-string\">'nier'</span>))([{ <span class=\"hljs-attr\">nier</span>: <span class=\"hljs-string\">'hello'</span> }, { <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-literal\">true</span> }]); <span class=\"hljs-comment\">// -&gt; false</span>","description":"Returns true if no elements match the predicate, false otherwise.","params":[{"name":"callback","description":"<p>predicate, will be called with each item</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"normalize","since":"v1.0.0","see":"reduce","category":"Array","examples":"N.normalize(\n  <span class=\"hljs-string\">'id'</span>,\n  [{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'name-1'</span> }, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'name-2'</span> }, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'name-3'</span> }]\n);\n\n<span class=\"hljs-comment\">// Will result into:</span>\n<span class=\"hljs-comment\">// {</span>\n<span class=\"hljs-comment\">//   '1': { id: 1, name: 'name-1' },</span>\n<span class=\"hljs-comment\">//   '2': { id: 2, name: 'name-2' },</span>\n<span class=\"hljs-comment\">//   '3': { id: 2, name: 'name-3' },</span>\n<span class=\"hljs-comment\">// }</span>","description":"Turns array of objects into normalized object structure based on provided property.","params":[{"name":"prop","description":"<p>property that will be used to create object keys</p>","typesDescription":"<code>string</code>"},{"name":"list","description":"<p>array of objects</p>","typesDescription":"<code>Array</code>"}]},{"name":"omit","since":"v1.0.0","see":"pick","category":"Object","examples":"N.omit([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; { c: 3 }</span>\nN.omit([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'d'</span>], { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; { c: 3 }</span>\nN.omit([], { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; { a: 1, b: 2, c: 3 }</span>","description":"Takes a list of keys and an object. Returns shallow copy of object that will not contain specified keys.\nIf key is missing in object it will be ignored.","params":[{"name":"keys","description":"<p>list of keys that should not be included in new object</p>","typesDescription":"<code>Array</code>"},{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"partial","since":"v1.0.0","see":"partialRight","category":"Function","examples":"N.partial(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a + b, [<span class=\"hljs-number\">1</span>])(<span class=\"hljs-number\">2</span>); <span class=\"hljs-comment\">// -&gt; 3</span>\nN.partial(greet, name) =&gt; <span class=\"hljs-string\">`<span class=\"hljs-subst\">${greet}</span> <span class=\"hljs-subst\">${name}</span>`</span>, [<span class=\"hljs-string\">'hello'</span>])(<span class=\"hljs-string\">'nier'</span>); <span class=\"hljs-comment\">// -&gt; 'hello nier'</span>","description":"Binds function to specified argument list.","params":[{"name":"fn","description":"<p>function that should be binded</p>","typesDescription":"<code>Function</code>"},{"name":"predefined","description":"<p>list of arguments that function should be binded to</p>","typesDescription":"<code>Array</code>"}]},{"name":"partialRight","since":"v1.0.0","see":"partial","category":"Function","examples":"N.partialRight(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a / b, [<span class=\"hljs-number\">3</span>])(<span class=\"hljs-number\">6</span>); <span class=\"hljs-comment\">// -&gt; 2</span>\nN.partial(greet, name) =&gt; <span class=\"hljs-string\">`<span class=\"hljs-subst\">${greet}</span> <span class=\"hljs-subst\">${name}</span>`</span>, [<span class=\"hljs-string\">'nier'</span>])(<span class=\"hljs-string\">'hello'</span>); <span class=\"hljs-comment\">// -&gt; 'hello nier'</span>","description":"Binds function to specified argument list.","params":[{"name":"fn","description":"<p>function that should be binded</p>","typesDescription":"<code>Function</code>"},{"name":"predefined","description":"<p>list of arguments that function should be binded to</p>","typesDescription":"<code>Array</code>"}]},{"name":"path","since":"v1.0.0","category":"Object","examples":"N.path(<span class=\"hljs-string\">'a'</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }); <span class=\"hljs-comment\">// -&gt; 1</span>\nN.path([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> }, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; 1</span>\nN.path([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'c'</span>], { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// -&gt; undefined</span>","description":"Returns value at provided object path or undefined if path does not exist","params":[{"name":"pathTo","description":"<p>path to retrieve</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"pick","since":"v1.0.0","see":"omit","category":"Object","examples":"N.pick([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; { a: 1, b: 2 }</span>\nN.pick([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>, <span class=\"hljs-string\">'d'</span>], { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; { a: 1, b: 2 }</span>\nN.pick([], { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; {}</span>","description":"Takes a list of keys and an object. Returns shallow copy of object that will contain only specified keys.\nIf key is missing in object it will be ignored.","params":[{"name":"keys","description":"<p>list of keys that should be included in new object</p>","typesDescription":"<code>Array</code>"},{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"pipe","since":"v1.0.0","category":"Function","examples":"N.pipe(<span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> val + <span class=\"hljs-number\">1</span>, val =&gt; val * <span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// -&gt; 1 + 1 -&gt; 2 * 2 -&gt; 4</span>\nN.pipe(N.trim, N.upperFirst)(<span class=\"hljs-string\">'hello!  '</span>); <span class=\"hljs-comment\">// N.upperFirst('hello!  ') -&gt; N.trim('Hello!  ') -&gt; 'Hello!'</span>","description":"Performs first-to-last function composition. The first function may have any arity, the remaining functions must be unary.","params":[{"name":"fns","description":"<p>functions to compose</p>","typesDescription":"...<code>Function</code>"}]},{"name":"pluck","since":"v1.0.0","see":"map, path","category":"Array","examples":"N.pluck(<span class=\"hljs-string\">'a'</span>, [{ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span> }, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">3</span> }]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3]</span>\nN.pluck(<span class=\"hljs-string\">'a'</span>, [{ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">nothingToGetHere</span>: <span class=\"hljs-number\">2</span> }, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">3</span> }]); <span class=\"hljs-comment\">// -&gt; [1, undefined, 3]</span>\n\nN.pluck([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], [{ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> } }, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> } }, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span> } }]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3]</span>\nN.pluck([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], [{ <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> } }, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">nothingToGetHere</span>: <span class=\"hljs-number\">2</span> } }, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span> } }]); <span class=\"hljs-comment\">// -&gt; [1, undefined, 3]</span>\n\nN.pluck(<span class=\"hljs-number\">0</span>, [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'a'</span>], [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'b'</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'c'</span>]]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3]</span>\nN.pluck(<span class=\"hljs-number\">1</span>, [[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>], [<span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">3</span>]]); <span class=\"hljs-comment\">// -&gt; [1, undefined, 3]</span>\nN.pluck([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-number\">0</span>], [{ <span class=\"hljs-attr\">a</span>: [<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">'a'</span>] }, { <span class=\"hljs-attr\">a</span>: [<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'b'</span>] }, { <span class=\"hljs-attr\">a</span>: [<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">'c'</span>] }]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3]</span>","description":"Creates new array by extracting the same named property from all objects (or arrays) in the provided array.\nNote that if supplied path is not found in object, undefined will be added to the result array.\nEquivalent to N.map(N.path(path), array).","params":[{"name":"propPath","description":"<p>path to property</p>","typesDescription":"<code>Array</code>|<code>string</code>|<code>number</code>"},{"name":"list","description":"<p>array to pluck</p>","typesDescription":"<code>Array</code>"}]},{"name":"prepend","since":"v1.0.0","see":"append, concat","category":"Array","examples":"N.prepend(<span class=\"hljs-string\">'nier'</span>, [<span class=\"hljs-string\">'hello'</span>]); <span class=\"hljs-comment\">// -&gt; ['nier', 'hello']</span>\nN.prepend(<span class=\"hljs-string\">'who loves you?'</span>)([<span class=\"hljs-string\">'nier'</span>]); <span class=\"hljs-comment\">// ['who loves you?', 'nier']</span>\nN.prepend([<span class=\"hljs-string\">'nier'</span>], [<span class=\"hljs-string\">'hello'</span>]); <span class=\"hljs-comment\">// [['nier'], 'hello']</span>","description":"Creates new array containing the contents of the given array or array like structure,\nwith the give value at the front, folowed by the content of the array.\nNote that all array like data structures (e.g. strings, arguments) will be automaticly transformed to array.","params":[{"name":"value","description":"<p>element to add at the begining of array</p>","typesDescription":"<code>*</code>"},{"name":"data","description":"<p>array to add element to</p>","typesDescription":"<code>Array</code>"}]},{"name":"reduce","since":"v1.0.0","see":"normalize, withIndex","category":"Array","examples":"N.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, item</span>) =&gt;</span> acc + item, <span class=\"hljs-number\">10</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; 16</span>","description":"Applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.","params":[{"name":"callback","description":"<p>function that will be called with each item</p>","typesDescription":"<code>Function</code>"},{"name":"initialValue","description":"<p>initial value that will be used as accumulator</p>","typesDescription":"<code>*</code>"},{"name":"data","description":"","typesDescription":"<code>Array</code>"}]},{"name":"reject","since":"v1.0.0","see":"filter, withIndex","category":"Array","examples":"N.reject(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> item &gt; <span class=\"hljs-number\">2</span>)([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; [1, 2]</span>\nN.reject(\n  N.whereEq({ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-literal\">null</span> }),\n  [{ <span class=\"hljs-attr\">id</span>: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">'nier'</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">2</span> }, { <span class=\"hljs-attr\">id</span>: <span class=\"hljs-literal\">null</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-number\">3</span> }]\n); <span class=\"hljs-comment\">// -&gt; [{ id: 'nier', name: 2 }]</span>","description":"Removes item from list if it matches the predicate.","params":[{"name":"callback","description":"<p>predicate</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"<p>array to filter</p>","typesDescription":"<code>Array</code>"}]},{"name":"reverse","since":"v1.0.0","category":"Array","examples":"N.reverse([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; [3, 2, 1]</span>\nN.reverse(<span class=\"hljs-string\">'nier'</span>); <span class=\"hljs-comment\">// -&gt; 'rein'</span>","description":"Returns new collection with reversed order.","params":[{"name":"collection","description":"<p>data to reverse</p>","typesDescription":"<code>Array</code>|<code>string</code>"}]},{"name":"set","since":"v1.0.0","see":"setWith, unset","category":"Object","examples":"N.set(<span class=\"hljs-string\">'prop'</span>, <span class=\"hljs-string\">'value'</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// -&gt; { a: 1, prop: 'value' }</span>\nN.set(<span class=\"hljs-string\">'prop'</span>, <span class=\"hljs-string\">'value'</span>, { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// -&gt; { prop: 'value' }</span>\nN.set([<span class=\"hljs-string\">'nested'</span>, <span class=\"hljs-string\">'prop'</span>], <span class=\"hljs-string\">'value'</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// -&gt; { a: 1, nested: { prop: 'value' } }</span>\nN.set([<span class=\"hljs-string\">'nested'</span>, <span class=\"hljs-string\">'prop'</span>], <span class=\"hljs-string\">'value'</span>, { <span class=\"hljs-attr\">nested</span>: { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-number\">1</span> } }); <span class=\"hljs-comment\">// -&gt; { nested: { prop: 'value' } }</span>","description":"Creates shallow copy of object and cretes or overrides value at provided path.\nCreates shallow copies for all nested object paths.","params":[{"name":"path","description":"<p>path to property, where value should be set</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"value","description":"","typesDescription":"<code>*</code>"},{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"setWith","since":"v1.0.0","see":"set, unset, evolve","category":"Object","examples":"N.setWith(<span class=\"hljs-string\">'a'</span>, (val) =&gt; val + <span class=\"hljs-number\">1</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// -&gt; { a: 2 }</span>\nN.setWith([<span class=\"hljs-string\">'a'</span>, <span class=\"hljs-string\">'b'</span>], (val) =&gt; val + <span class=\"hljs-number\">1</span>, { <span class=\"hljs-attr\">a</span>: { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> } }); <span class=\"hljs-comment\">// -&gt; { a: { b: 2 } }</span>\nN.setWith(<span class=\"hljs-string\">'a'</span>, (val) =&gt; val === <span class=\"hljs-literal\">undefined</span>, { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// -&gt; { a: true, b: 1 }</span>","description":"Works exactly like set function but instead of accepting actual value,\nsetWith accept callback that will receive current value of the object at path,\nthe result of calling callback with value will be set to object path.\nIf object does not have value at provided path callback will receive undefined.","params":[{"name":"pathToSet","description":"<p>path to property, where value should be set</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"callback","description":"","typesDescription":"<code>Function</code>"},{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"slice","since":"v1.0.0","category":"Array","examples":"N.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; [0, 1]</span>\nN.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">-1</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; [0, 1, 2, 3]</span>\nN.slice(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">-2</span>, [<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; [2]</span>\n * N.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">'nier'</span>); <span class=\"hljs-comment\">// -&gt; 'ni'</span>","description":"Returns shallow copy of collection part selected from the begin (inclusive) to end (exclusive).","params":[{"name":"begin","description":"<p>start index</p>","typesDescription":"<code>number</code>"},{"name":"end","description":"<p>slice end</p>","typesDescription":"<code>number</code>"},{"name":"collection","description":"","typesDescription":"<code>Array</code>|<code>string</code>"}]},{"name":"some","since":"v1.0.0","see":"some, every, withIndex","alias":"any","category":"Array","examples":"N.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> number &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; true</span>\nN.some(<span class=\"hljs-function\">(<span class=\"hljs-params\">number</span>) =&gt;</span> number &lt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; false</span>\nN.some(N.path(<span class=\"hljs-string\">'nier'</span>))([{ <span class=\"hljs-attr\">nier</span>: <span class=\"hljs-string\">'hello'</span> }, { <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-literal\">true</span> }]); <span class=\"hljs-comment\">// -&gt; true</span>","description":"Returns true if any element match the predicate, false otherwise.","params":[{"name":"callback","description":"<p>predicate, will be called with each item</p>","typesDescription":"<code>Function</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]},{"name":"toLowerCase","since":"v1.0.0","see":"toUpperCase, upperFirst","category":"String","examples":"N.toLowerCase(<span class=\"hljs-string\">'Hello!'</span>); <span class=\"hljs-comment\">// -&gt; 'hello!'</span>\nN.toLowerCase(<span class=\"hljs-string\">'HELLO!'</span>); <span class=\"hljs-comment\">// -&gt; 'hello!'</span>\nN.toLowerCase(<span class=\"hljs-string\">'hello!'</span>); <span class=\"hljs-comment\">// -&gt; 'hello!'</span>","description":"Convers all string characters to lower case.","params":[{"name":"str","description":"","typesDescription":"<code>string</code>"}]},{"name":"toUpperCase","since":"v1.0.0","see":"toLowerCase, upperFirst","category":"String","examples":"N.toUpperCase(<span class=\"hljs-string\">'Hello!'</span>); <span class=\"hljs-comment\">// -&gt; 'Hello!'</span>\nN.toUpperCase(<span class=\"hljs-string\">'HELLO!'</span>); <span class=\"hljs-comment\">// -&gt; 'Hello!'</span>\nN.toUpperCase(<span class=\"hljs-string\">'hello!'</span>); <span class=\"hljs-comment\">// -&gt; 'Hello!'</span>","description":"Convers all string characters to upper case.","params":[{"name":"str","description":"","typesDescription":"<code>string</code>"}]},{"name":"type","since":"v1.0.0","category":"Language","examples":"N.type(<span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// -&gt; 'Null'</span>\nN.type(<span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// -&gt; 'Undefined'</span>\nN.type(<span class=\"hljs-string\">'hello'</span>); <span class=\"hljs-comment\">// -&gt; 'String'</span>\nN.type(<span class=\"hljs-number\">1</span>); <span class=\"hljs-comment\">// -&gt; 'Number'</span>\nN.type({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// -&gt; 'Object'</span>\nN.type([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>]); <span class=\"hljs-comment\">// -&gt; 'Array'</span>\nN.type(<span class=\"hljs-function\"><span class=\"hljs-params\">f</span> =&gt;</span> f); <span class=\"hljs-comment\">// -&gt; 'Function'</span>\nN.type(<span class=\"hljs-regexp\">/a/g</span>); <span class=\"hljs-comment\">// -&gt; 'RegExp'</span>","description":"Returns single word description of the value type","params":[{"name":"value","description":"","typesDescription":"<code>*</code>"}]},{"name":"uniq","since":"v1.0.0","category":"Array","examples":"N.uniq([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3]</span>\nN.uniq([{ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }]); <span class=\"hljs-comment\">// -&gt; [{ a: 1 }, { b: 2 }]</span>\nN.uniq([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3]</span>","description":"Creates new array that contains all the same items from the initial one,\nbut all duplicates are excluded.","params":[{"name":"array","description":"","typesDescription":"<code>Array</code>"}]},{"name":"unnest","since":"v1.0.0","see":"flatten","category":"Array","examples":"N.unnest([[<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">4</span>]]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3, 4]</span>\nN.unnest([<span class=\"hljs-number\">1</span>, [<span class=\"hljs-number\">2</span>], [<span class=\"hljs-number\">3</span>], [[<span class=\"hljs-number\">4</span>]]]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3, [4]]</span>\nN.unnest([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3, 4]</span>","description":"Removes one level of nesting from the list","params":[{"name":"list","description":"<p>data to unnest</p>","typesDescription":"<code>Array</code>"}]},{"name":"unset","since":"v1.0.0","see":"unset, setWith","category":"Object","examples":"N.unset(<span class=\"hljs-string\">'prop'</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-number\">2</span> }); <span class=\"hljs-comment\">// -&gt; { a: 1 }</span>\nN.unset(<span class=\"hljs-string\">'prop'</span>, { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// -&gt; {}</span>\nN.unset([<span class=\"hljs-string\">'nested'</span>, <span class=\"hljs-string\">'prop'</span>], <span class=\"hljs-string\">'value'</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">nested</span>: { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-string\">'value'</span> } }); <span class=\"hljs-comment\">// -&gt; { a: 1, nested: {} }</span>\nN.unset(<span class=\"hljs-string\">'nested'</span>, <span class=\"hljs-string\">'value'</span>, { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">nested</span>: { <span class=\"hljs-attr\">prop</span>: <span class=\"hljs-string\">'value'</span> } }); <span class=\"hljs-comment\">// -&gt; { a: 1 }</span>","description":"Creates shallow copy of object and deletes value at provided path if it exists.\nCreates shallow copies for all nested object referenced in path if path exists.","params":[{"name":"path","description":"<p>path to property that should be removed</p>","typesDescription":"<code>Array</code>|<code>string</code>"},{"name":"value","description":"","typesDescription":"<code>*</code>"},{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"update","since":"v1.0.0","see":"updateWith","category":"Array","examples":"N.update(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">'hello'</span>, [<span class=\"hljs-string\">'hi'</span>, <span class=\"hljs-string\">'nier'</span>]); <span class=\"hljs-comment\">// -&gt; ['hello', 'nier']</span>\nN.update(<span class=\"hljs-number\">5</span>, <span class=\"hljs-string\">'hello'</span>, [<span class=\"hljs-string\">'hi'</span>, <span class=\"hljs-string\">'nier'</span>]); <span class=\"hljs-comment\">// -&gt; ['hi', 'nier']</span>\nN.update(<span class=\"hljs-number\">-1</span>, <span class=\"hljs-string\">'nier'</span>, [<span class=\"hljs-string\">'hi'</span>, <span class=\"hljs-string\">'there'</span>, <span class=\"hljs-string\">'you'</span>]); <span class=\"hljs-comment\">// -&gt; ['hi', 'there', 'nier']</span>","description":"Creates new copy of the array with the element at index replaced with provided value.\nIf array does not have value at provided index, it won't be set and the original array will be returned.\nNote that update will only create shallow copy of the array.","params":[{"name":"index","description":"<p>position to update</p>","typesDescription":"<code>number</code>"},{"name":"value","description":"<p>value to set at position</p>","typesDescription":"<code>*</code>"},{"name":"array","description":"","typesDescription":"<code>Array</code>"}]},{"name":"updateWith","since":"v1.0.0","see":"update","category":"Array","examples":"N.updateWith(<span class=\"hljs-number\">0</span>, i =&gt; i + <span class=\"hljs-number\">10</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; [11, 2, 3]</span>\nN.updateWith(<span class=\"hljs-number\">-1</span>, i =&gt; i + <span class=\"hljs-number\">10</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; [1, 2, 13]</span>\nN.updateWith(<span class=\"hljs-number\">40</span>, i =&gt; i + <span class=\"hljs-number\">10</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>]); <span class=\"hljs-comment\">// -&gt; [1, 2, 3]</span>","description":"Creates new copy of the array with the element at index replaced with provided callback function called with item at index.\nIf array does not have value at provided index, it won't be set and the original array will be returned.\nNote that updateWith will only create shallow copy of the array.","params":[{"name":"index","description":"<p>position to update</p>","typesDescription":"<code>number</code>"},{"name":"callback","description":"<p>function result of calling which with value at index will replace value at index</p>","typesDescription":"<code>Function</code>"},{"name":"array","description":"","typesDescription":"<code>Array</code>"}]},{"name":"upperFirst","since":"v1.0.0","see":"toUpperCase, toLowerCase","category":"String","examples":"N.upperFirst(<span class=\"hljs-string\">'hello!'</span>); <span class=\"hljs-comment\">// -&gt; 'Hello!'</span>\nN.upperFirst(<span class=\"hljs-string\">'Hello!'</span>); <span class=\"hljs-comment\">// -&gt; 'Hello!'</span>\nN.upperFirst(<span class=\"hljs-string\">'hELLO!'</span>); <span class=\"hljs-comment\">// -&gt; 'HELLO!'</span>","description":"Convers first character of a string to upper case.","params":[{"name":"str","description":"","typesDescription":"<code>string</code>"}]},{"name":"values","since":"v1.0.0","see":"values","category":"Object","examples":"N.values({}); <span class=\"hljs-comment\">// -&gt; []</span>\nN.values({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; [1, 2, 3]</span>","description":"Returns an array of enumerable own properties of the provided object.","params":[{"name":"object","description":"","typesDescription":"<code>Object</code>"}]},{"name":"where","since":"v1.0.0","see":"whereEq","category":"Object","examples":"<span class=\"hljs-keyword\">const</span> spec = N.where({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val &gt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> val &gt; <span class=\"hljs-number\">2</span> });\nspec({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }); <span class=\"hljs-comment\">// -&gt; false</span>\nspec({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">2</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; true</span>\nspec({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">4</span> }); <span class=\"hljs-comment\">// -&gt; false</span>","description":"Takes a spec object and a test object, returs true if test object fully satisfies spec.\nEach of spec object property must be a function, otherwise where will return false.","params":[{"name":"spec","description":"","typesDescription":"<code>Object</code>"},{"name":"data","description":"","typesDescription":"<code>Object</code>"}]},{"name":"whereEq","since":"v1.0.0","see":"where","category":"Object","examples":"<span class=\"hljs-keyword\">const</span> spec = N.where({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> });\nspec({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }); <span class=\"hljs-comment\">// -&gt; true</span>\nspec({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">3</span> }); <span class=\"hljs-comment\">// -&gt; false</span>\nspec({ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }); <span class=\"hljs-comment\">// -&gt; false</span>","description":"Takes a spec object and a test object, returs true if test object fully satisfies spec.\nEach of spec object property can contain any data type and will be compared to spec with N.equals.","params":[{"name":"spec","description":"","typesDescription":"<code>Object</code>"},{"name":"data","description":"","typesDescription":"<code>Object</code>"}]},{"name":"withIndex","since":"v1.0.0","category":"Function","examples":"N.withIndex(map)(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, index</span>) =&gt;</span> item + index, [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>]); <span class=\"hljs-comment\">// -&gt; [10, 21, 32]</span>\nN.withIndex(map)(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, __, array</span>) =&gt;</span> array, [<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>]); <span class=\"hljs-comment\">// -&gt; [[10, 20, 30], [10, 20, 30], [10, 20, 30]]</span>\nN.withIndex(findLast)(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, index</span>) =&gt;</span> index &gt; <span class=\"hljs-number\">2</span>, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>]); <span class=\"hljs-comment\">// -&gt; 5</span>","description":"Creates new list iterator function with adding index and array arguments to the existing one.","params":[{"name":"fn","description":"","typesDescription":"<code>Function</code>"}]},{"name":"without","since":"v1.0.0","category":"Array","examples":"N.without([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>], [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>]); <span class=\"hljs-comment\">// -&gt; [4, 5, 6]</span>\nN.without([{ <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }], [{ <span class=\"hljs-attr\">a</span> : <span class=\"hljs-number\">1</span> }, { <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">2</span> }, { <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">3</span> }, { <span class=\"hljs-attr\">d</span>: <span class=\"hljs-number\">4</span> }]); <span class=\"hljs-comment\">// -&gt; [{ c: 3 }, { d: 4 }]</span>","description":"Returns new array without values specified in the first argument","params":[{"name":"exclude","description":"","typesDescription":"<code>Array</code>"},{"name":"list","description":"","typesDescription":"<code>Array</code>"}]}]}
